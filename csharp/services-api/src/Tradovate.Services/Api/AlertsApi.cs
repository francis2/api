/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tradovate.Services.Client;
using Tradovate.Services.Model;

namespace Tradovate.Services.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAlertsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AdminAlertSignalResponse</returns>
        AdminAlertSignalResponse CompleteAlertSignal (CompleteAlertSignal body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AdminAlertSignalResponse</returns>
        ApiResponse<AdminAlertSignalResponse> CompleteAlertSignalWithHttpInfo (CompleteAlertSignal body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AlertResponse</returns>
        AlertResponse CreateAlert (CreateAlert body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AlertResponse</returns>
        ApiResponse<AlertResponse> CreateAlertWithHttpInfo (CreateAlert body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AlertResponse</returns>
        AlertResponse DeleteAlert (DeleteAlert body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AlertResponse</returns>
        ApiResponse<AlertResponse> DeleteAlertWithHttpInfo (DeleteAlert body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AlertResponse</returns>
        AlertResponse DismissAlert (DismissAlert body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AlertResponse</returns>
        ApiResponse<AlertResponse> DismissAlertWithHttpInfo (DismissAlert body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of AdminAlertSignal type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>AdminAlertSignal</returns>
        AdminAlertSignal GetAdminAlertSignal (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of AdminAlertSignal type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of AdminAlertSignal</returns>
        ApiResponse<AdminAlertSignal> GetAdminAlertSignalWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of AdminAlertSignal type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;AdminAlertSignal&gt;</returns>
        List<AdminAlertSignal> GetAdminAlertSignals (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of AdminAlertSignal type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;AdminAlertSignal&gt;</returns>
        ApiResponse<List<AdminAlertSignal>> GetAdminAlertSignalsWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Alert type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Alert</returns>
        Alert GetAlert (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Alert type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Alert</returns>
        ApiResponse<Alert> GetAlertWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of AlertSignal type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>AlertSignal</returns>
        AlertSignal GetAlertSignal (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of AlertSignal type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of AlertSignal</returns>
        ApiResponse<AlertSignal> GetAlertSignalWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of AlertSignal type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;AlertSignal&gt;</returns>
        List<AlertSignal> GetAlertSignals (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of AlertSignal type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;AlertSignal&gt;</returns>
        ApiResponse<List<AlertSignal>> GetAlertSignalsWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Alert type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;Alert&gt;</returns>
        List<Alert> GetAlerts (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Alert type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;Alert&gt;</returns>
        ApiResponse<List<Alert>> GetAlertsWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AdminAlertSignal type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AdminAlertSignal&gt;</returns>
        List<AdminAlertSignal> GetAllAdminAlertSignals ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AdminAlertSignal type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AdminAlertSignal&gt;</returns>
        ApiResponse<List<AdminAlertSignal>> GetAllAdminAlertSignalsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AlertSignal type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AlertSignal&gt;</returns>
        List<AlertSignal> GetAllAlertSignals ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AlertSignal type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AlertSignal&gt;</returns>
        ApiResponse<List<AlertSignal>> GetAllAlertSignalsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Alert type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Alert&gt;</returns>
        List<Alert> GetAllAlerts ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Alert type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Alert&gt;</returns>
        ApiResponse<List<Alert>> GetAllAlertsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AdminAlertSignal type related to AdminAlert entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of AdminAlert entity</param>
        /// <returns>List&lt;AdminAlertSignal&gt;</returns>
        List<AdminAlertSignal> GetOwnedAdminAlertSignals (int? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AdminAlertSignal type related to AdminAlert entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of AdminAlert entity</param>
        /// <returns>ApiResponse of List&lt;AdminAlertSignal&gt;</returns>
        ApiResponse<List<AdminAlertSignal>> GetOwnedAdminAlertSignalsWithHttpInfo (int? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AdminAlertSignal type related to multiple entities of AdminAlert type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of AdminAlert entities</param>
        /// <returns>List&lt;AdminAlertSignal&gt;</returns>
        List<AdminAlertSignal> GetOwnedAdminAlertSignalsBatch (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AdminAlertSignal type related to multiple entities of AdminAlert type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of AdminAlert entities</param>
        /// <returns>ApiResponse of List&lt;AdminAlertSignal&gt;</returns>
        ApiResponse<List<AdminAlertSignal>> GetOwnedAdminAlertSignalsBatchWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AlertSignal type related to Alert entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Alert entity</param>
        /// <returns>List&lt;AlertSignal&gt;</returns>
        List<AlertSignal> GetOwnedAlertSignals (int? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AlertSignal type related to Alert entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Alert entity</param>
        /// <returns>ApiResponse of List&lt;AlertSignal&gt;</returns>
        ApiResponse<List<AlertSignal>> GetOwnedAlertSignalsWithHttpInfo (int? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AlertSignal type related to multiple entities of Alert type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Alert entities</param>
        /// <returns>List&lt;AlertSignal&gt;</returns>
        List<AlertSignal> GetOwnedAlertSignalsBatch (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AlertSignal type related to multiple entities of Alert type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Alert entities</param>
        /// <returns>ApiResponse of List&lt;AlertSignal&gt;</returns>
        ApiResponse<List<AlertSignal>> GetOwnedAlertSignalsBatchWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Alert type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>List&lt;Alert&gt;</returns>
        List<Alert> GetOwnedAlerts (int? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Alert type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>ApiResponse of List&lt;Alert&gt;</returns>
        ApiResponse<List<Alert>> GetOwnedAlertsWithHttpInfo (int? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Alert type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>List&lt;Alert&gt;</returns>
        List<Alert> GetOwnedAlertsBatch (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Alert type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>ApiResponse of List&lt;Alert&gt;</returns>
        ApiResponse<List<Alert>> GetOwnedAlertsBatchWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AlertResponse</returns>
        AlertResponse MarkReadAlertSignal (MarkReadAlertSignal body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AlertResponse</returns>
        ApiResponse<AlertResponse> MarkReadAlertSignalWithHttpInfo (MarkReadAlertSignal body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AlertResponse</returns>
        AlertResponse ModifyAlert (ModifyAlert body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AlertResponse</returns>
        ApiResponse<AlertResponse> ModifyAlertWithHttpInfo (ModifyAlert body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AlertResponse</returns>
        AlertResponse ResetAlert (ResetAlert body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AlertResponse</returns>
        ApiResponse<AlertResponse> ResetAlertWithHttpInfo (ResetAlert body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AdminAlertSignalResponse</returns>
        AdminAlertSignalResponse TakeAlertSignalOwnership (TakeAlertSignalOwnership body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AdminAlertSignalResponse</returns>
        ApiResponse<AdminAlertSignalResponse> TakeAlertSignalOwnershipWithHttpInfo (TakeAlertSignalOwnership body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AdminAlertSignalResponse</returns>
        System.Threading.Tasks.Task<AdminAlertSignalResponse> CompleteAlertSignalAsync (CompleteAlertSignal body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AdminAlertSignalResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdminAlertSignalResponse>> CompleteAlertSignalAsyncWithHttpInfo (CompleteAlertSignal body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AlertResponse</returns>
        System.Threading.Tasks.Task<AlertResponse> CreateAlertAsync (CreateAlert body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AlertResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlertResponse>> CreateAlertAsyncWithHttpInfo (CreateAlert body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AlertResponse</returns>
        System.Threading.Tasks.Task<AlertResponse> DeleteAlertAsync (DeleteAlert body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AlertResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlertResponse>> DeleteAlertAsyncWithHttpInfo (DeleteAlert body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AlertResponse</returns>
        System.Threading.Tasks.Task<AlertResponse> DismissAlertAsync (DismissAlert body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AlertResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlertResponse>> DismissAlertAsyncWithHttpInfo (DismissAlert body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of AdminAlertSignal type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of AdminAlertSignal</returns>
        System.Threading.Tasks.Task<AdminAlertSignal> GetAdminAlertSignalAsync (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of AdminAlertSignal type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (AdminAlertSignal)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdminAlertSignal>> GetAdminAlertSignalAsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of AdminAlertSignal type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;AdminAlertSignal&gt;</returns>
        System.Threading.Tasks.Task<List<AdminAlertSignal>> GetAdminAlertSignalsAsync (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of AdminAlertSignal type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;AdminAlertSignal&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AdminAlertSignal>>> GetAdminAlertSignalsAsyncWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Alert type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Alert</returns>
        System.Threading.Tasks.Task<Alert> GetAlertAsync (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Alert type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Alert)</returns>
        System.Threading.Tasks.Task<ApiResponse<Alert>> GetAlertAsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of AlertSignal type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of AlertSignal</returns>
        System.Threading.Tasks.Task<AlertSignal> GetAlertSignalAsync (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of AlertSignal type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (AlertSignal)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlertSignal>> GetAlertSignalAsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of AlertSignal type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;AlertSignal&gt;</returns>
        System.Threading.Tasks.Task<List<AlertSignal>> GetAlertSignalsAsync (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of AlertSignal type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;AlertSignal&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AlertSignal>>> GetAlertSignalsAsyncWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Alert type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;Alert&gt;</returns>
        System.Threading.Tasks.Task<List<Alert>> GetAlertsAsync (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Alert type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;Alert&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Alert>>> GetAlertsAsyncWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AdminAlertSignal type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AdminAlertSignal&gt;</returns>
        System.Threading.Tasks.Task<List<AdminAlertSignal>> GetAllAdminAlertSignalsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AdminAlertSignal type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AdminAlertSignal&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AdminAlertSignal>>> GetAllAdminAlertSignalsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AlertSignal type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AlertSignal&gt;</returns>
        System.Threading.Tasks.Task<List<AlertSignal>> GetAllAlertSignalsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AlertSignal type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AlertSignal&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AlertSignal>>> GetAllAlertSignalsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Alert type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Alert&gt;</returns>
        System.Threading.Tasks.Task<List<Alert>> GetAllAlertsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Alert type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Alert&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Alert>>> GetAllAlertsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AdminAlertSignal type related to AdminAlert entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of AdminAlert entity</param>
        /// <returns>Task of List&lt;AdminAlertSignal&gt;</returns>
        System.Threading.Tasks.Task<List<AdminAlertSignal>> GetOwnedAdminAlertSignalsAsync (int? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AdminAlertSignal type related to AdminAlert entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of AdminAlert entity</param>
        /// <returns>Task of ApiResponse (List&lt;AdminAlertSignal&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AdminAlertSignal>>> GetOwnedAdminAlertSignalsAsyncWithHttpInfo (int? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AdminAlertSignal type related to multiple entities of AdminAlert type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of AdminAlert entities</param>
        /// <returns>Task of List&lt;AdminAlertSignal&gt;</returns>
        System.Threading.Tasks.Task<List<AdminAlertSignal>> GetOwnedAdminAlertSignalsBatchAsync (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AdminAlertSignal type related to multiple entities of AdminAlert type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of AdminAlert entities</param>
        /// <returns>Task of ApiResponse (List&lt;AdminAlertSignal&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AdminAlertSignal>>> GetOwnedAdminAlertSignalsBatchAsyncWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AlertSignal type related to Alert entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Alert entity</param>
        /// <returns>Task of List&lt;AlertSignal&gt;</returns>
        System.Threading.Tasks.Task<List<AlertSignal>> GetOwnedAlertSignalsAsync (int? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AlertSignal type related to Alert entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Alert entity</param>
        /// <returns>Task of ApiResponse (List&lt;AlertSignal&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AlertSignal>>> GetOwnedAlertSignalsAsyncWithHttpInfo (int? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AlertSignal type related to multiple entities of Alert type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Alert entities</param>
        /// <returns>Task of List&lt;AlertSignal&gt;</returns>
        System.Threading.Tasks.Task<List<AlertSignal>> GetOwnedAlertSignalsBatchAsync (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of AlertSignal type related to multiple entities of Alert type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Alert entities</param>
        /// <returns>Task of ApiResponse (List&lt;AlertSignal&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AlertSignal>>> GetOwnedAlertSignalsBatchAsyncWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Alert type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of List&lt;Alert&gt;</returns>
        System.Threading.Tasks.Task<List<Alert>> GetOwnedAlertsAsync (int? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Alert type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of ApiResponse (List&lt;Alert&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Alert>>> GetOwnedAlertsAsyncWithHttpInfo (int? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Alert type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of List&lt;Alert&gt;</returns>
        System.Threading.Tasks.Task<List<Alert>> GetOwnedAlertsBatchAsync (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Alert type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of ApiResponse (List&lt;Alert&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Alert>>> GetOwnedAlertsBatchAsyncWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AlertResponse</returns>
        System.Threading.Tasks.Task<AlertResponse> MarkReadAlertSignalAsync (MarkReadAlertSignal body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AlertResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlertResponse>> MarkReadAlertSignalAsyncWithHttpInfo (MarkReadAlertSignal body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AlertResponse</returns>
        System.Threading.Tasks.Task<AlertResponse> ModifyAlertAsync (ModifyAlert body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AlertResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlertResponse>> ModifyAlertAsyncWithHttpInfo (ModifyAlert body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AlertResponse</returns>
        System.Threading.Tasks.Task<AlertResponse> ResetAlertAsync (ResetAlert body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AlertResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlertResponse>> ResetAlertAsyncWithHttpInfo (ResetAlert body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AdminAlertSignalResponse</returns>
        System.Threading.Tasks.Task<AdminAlertSignalResponse> TakeAlertSignalOwnershipAsync (TakeAlertSignalOwnership body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AdminAlertSignalResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdminAlertSignalResponse>> TakeAlertSignalOwnershipAsyncWithHttpInfo (TakeAlertSignalOwnership body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AlertsApi : IAlertsApi
    {
        private Tradovate.Services.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AlertsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AlertsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Tradovate.Services.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlertsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AlertsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tradovate.Services.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tradovate.Services.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AdminAlertSignalResponse</returns>
        public AdminAlertSignalResponse CompleteAlertSignal (CompleteAlertSignal body)
        {
             ApiResponse<AdminAlertSignalResponse> localVarResponse = CompleteAlertSignalWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AdminAlertSignalResponse</returns>
        public ApiResponse< AdminAlertSignalResponse > CompleteAlertSignalWithHttpInfo (CompleteAlertSignal body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertsApi->CompleteAlertSignal");

            var localVarPath = "/adminAlertSignal/completealertsignal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteAlertSignal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdminAlertSignalResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdminAlertSignalResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminAlertSignalResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AdminAlertSignalResponse</returns>
        public async System.Threading.Tasks.Task<AdminAlertSignalResponse> CompleteAlertSignalAsync (CompleteAlertSignal body)
        {
             ApiResponse<AdminAlertSignalResponse> localVarResponse = await CompleteAlertSignalAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AdminAlertSignalResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdminAlertSignalResponse>> CompleteAlertSignalAsyncWithHttpInfo (CompleteAlertSignal body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertsApi->CompleteAlertSignal");

            var localVarPath = "/adminAlertSignal/completealertsignal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteAlertSignal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdminAlertSignalResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdminAlertSignalResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminAlertSignalResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AlertResponse</returns>
        public AlertResponse CreateAlert (CreateAlert body)
        {
             ApiResponse<AlertResponse> localVarResponse = CreateAlertWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AlertResponse</returns>
        public ApiResponse< AlertResponse > CreateAlertWithHttpInfo (CreateAlert body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertsApi->CreateAlert");

            var localVarPath = "/alert/createalert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAlert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AlertResponse</returns>
        public async System.Threading.Tasks.Task<AlertResponse> CreateAlertAsync (CreateAlert body)
        {
             ApiResponse<AlertResponse> localVarResponse = await CreateAlertAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AlertResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlertResponse>> CreateAlertAsyncWithHttpInfo (CreateAlert body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertsApi->CreateAlert");

            var localVarPath = "/alert/createalert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAlert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AlertResponse</returns>
        public AlertResponse DeleteAlert (DeleteAlert body)
        {
             ApiResponse<AlertResponse> localVarResponse = DeleteAlertWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AlertResponse</returns>
        public ApiResponse< AlertResponse > DeleteAlertWithHttpInfo (DeleteAlert body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertsApi->DeleteAlert");

            var localVarPath = "/alert/deletealert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAlert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AlertResponse</returns>
        public async System.Threading.Tasks.Task<AlertResponse> DeleteAlertAsync (DeleteAlert body)
        {
             ApiResponse<AlertResponse> localVarResponse = await DeleteAlertAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AlertResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlertResponse>> DeleteAlertAsyncWithHttpInfo (DeleteAlert body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertsApi->DeleteAlert");

            var localVarPath = "/alert/deletealert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAlert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AlertResponse</returns>
        public AlertResponse DismissAlert (DismissAlert body)
        {
             ApiResponse<AlertResponse> localVarResponse = DismissAlertWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AlertResponse</returns>
        public ApiResponse< AlertResponse > DismissAlertWithHttpInfo (DismissAlert body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertsApi->DismissAlert");

            var localVarPath = "/alert/dismissalert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DismissAlert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AlertResponse</returns>
        public async System.Threading.Tasks.Task<AlertResponse> DismissAlertAsync (DismissAlert body)
        {
             ApiResponse<AlertResponse> localVarResponse = await DismissAlertAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AlertResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlertResponse>> DismissAlertAsyncWithHttpInfo (DismissAlert body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertsApi->DismissAlert");

            var localVarPath = "/alert/dismissalert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DismissAlert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertResponse)));
            
        }

        /// <summary>
        ///  Retrieves an entity of AdminAlertSignal type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>AdminAlertSignal</returns>
        public AdminAlertSignal GetAdminAlertSignal (int? id)
        {
             ApiResponse<AdminAlertSignal> localVarResponse = GetAdminAlertSignalWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of AdminAlertSignal type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of AdminAlertSignal</returns>
        public ApiResponse< AdminAlertSignal > GetAdminAlertSignalWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AlertsApi->GetAdminAlertSignal");

            var localVarPath = "/adminAlertSignal/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAdminAlertSignal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdminAlertSignal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdminAlertSignal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminAlertSignal)));
            
        }

        /// <summary>
        ///  Retrieves an entity of AdminAlertSignal type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of AdminAlertSignal</returns>
        public async System.Threading.Tasks.Task<AdminAlertSignal> GetAdminAlertSignalAsync (int? id)
        {
             ApiResponse<AdminAlertSignal> localVarResponse = await GetAdminAlertSignalAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of AdminAlertSignal type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (AdminAlertSignal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdminAlertSignal>> GetAdminAlertSignalAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AlertsApi->GetAdminAlertSignal");

            var localVarPath = "/adminAlertSignal/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAdminAlertSignal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdminAlertSignal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdminAlertSignal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminAlertSignal)));
            
        }

        /// <summary>
        ///  Retrieves multiple entities of AdminAlertSignal type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;AdminAlertSignal&gt;</returns>
        public List<AdminAlertSignal> GetAdminAlertSignals (List<int?> ids)
        {
             ApiResponse<List<AdminAlertSignal>> localVarResponse = GetAdminAlertSignalsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of AdminAlertSignal type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;AdminAlertSignal&gt;</returns>
        public ApiResponse< List<AdminAlertSignal> > GetAdminAlertSignalsWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling AlertsApi->GetAdminAlertSignals");

            var localVarPath = "/adminAlertSignal/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAdminAlertSignals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AdminAlertSignal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AdminAlertSignal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AdminAlertSignal>)));
            
        }

        /// <summary>
        ///  Retrieves multiple entities of AdminAlertSignal type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;AdminAlertSignal&gt;</returns>
        public async System.Threading.Tasks.Task<List<AdminAlertSignal>> GetAdminAlertSignalsAsync (List<int?> ids)
        {
             ApiResponse<List<AdminAlertSignal>> localVarResponse = await GetAdminAlertSignalsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of AdminAlertSignal type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;AdminAlertSignal&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AdminAlertSignal>>> GetAdminAlertSignalsAsyncWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling AlertsApi->GetAdminAlertSignals");

            var localVarPath = "/adminAlertSignal/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAdminAlertSignals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AdminAlertSignal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AdminAlertSignal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AdminAlertSignal>)));
            
        }

        /// <summary>
        ///  Retrieves an entity of Alert type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Alert</returns>
        public Alert GetAlert (int? id)
        {
             ApiResponse<Alert> localVarResponse = GetAlertWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of Alert type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Alert</returns>
        public ApiResponse< Alert > GetAlertWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AlertsApi->GetAlert");

            var localVarPath = "/alert/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Alert>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Alert) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Alert)));
            
        }

        /// <summary>
        ///  Retrieves an entity of Alert type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Alert</returns>
        public async System.Threading.Tasks.Task<Alert> GetAlertAsync (int? id)
        {
             ApiResponse<Alert> localVarResponse = await GetAlertAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of Alert type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Alert)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Alert>> GetAlertAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AlertsApi->GetAlert");

            var localVarPath = "/alert/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Alert>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Alert) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Alert)));
            
        }

        /// <summary>
        ///  Retrieves an entity of AlertSignal type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>AlertSignal</returns>
        public AlertSignal GetAlertSignal (int? id)
        {
             ApiResponse<AlertSignal> localVarResponse = GetAlertSignalWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of AlertSignal type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of AlertSignal</returns>
        public ApiResponse< AlertSignal > GetAlertSignalWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AlertsApi->GetAlertSignal");

            var localVarPath = "/alertSignal/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlertSignal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertSignal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertSignal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertSignal)));
            
        }

        /// <summary>
        ///  Retrieves an entity of AlertSignal type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of AlertSignal</returns>
        public async System.Threading.Tasks.Task<AlertSignal> GetAlertSignalAsync (int? id)
        {
             ApiResponse<AlertSignal> localVarResponse = await GetAlertSignalAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of AlertSignal type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (AlertSignal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlertSignal>> GetAlertSignalAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AlertsApi->GetAlertSignal");

            var localVarPath = "/alertSignal/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlertSignal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertSignal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertSignal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertSignal)));
            
        }

        /// <summary>
        ///  Retrieves multiple entities of AlertSignal type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;AlertSignal&gt;</returns>
        public List<AlertSignal> GetAlertSignals (List<int?> ids)
        {
             ApiResponse<List<AlertSignal>> localVarResponse = GetAlertSignalsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of AlertSignal type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;AlertSignal&gt;</returns>
        public ApiResponse< List<AlertSignal> > GetAlertSignalsWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling AlertsApi->GetAlertSignals");

            var localVarPath = "/alertSignal/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlertSignals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AlertSignal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AlertSignal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AlertSignal>)));
            
        }

        /// <summary>
        ///  Retrieves multiple entities of AlertSignal type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;AlertSignal&gt;</returns>
        public async System.Threading.Tasks.Task<List<AlertSignal>> GetAlertSignalsAsync (List<int?> ids)
        {
             ApiResponse<List<AlertSignal>> localVarResponse = await GetAlertSignalsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of AlertSignal type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;AlertSignal&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AlertSignal>>> GetAlertSignalsAsyncWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling AlertsApi->GetAlertSignals");

            var localVarPath = "/alertSignal/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlertSignals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AlertSignal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AlertSignal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AlertSignal>)));
            
        }

        /// <summary>
        ///  Retrieves multiple entities of Alert type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;Alert&gt;</returns>
        public List<Alert> GetAlerts (List<int?> ids)
        {
             ApiResponse<List<Alert>> localVarResponse = GetAlertsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of Alert type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;Alert&gt;</returns>
        public ApiResponse< List<Alert> > GetAlertsWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling AlertsApi->GetAlerts");

            var localVarPath = "/alert/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlerts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Alert>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Alert>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Alert>)));
            
        }

        /// <summary>
        ///  Retrieves multiple entities of Alert type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;Alert&gt;</returns>
        public async System.Threading.Tasks.Task<List<Alert>> GetAlertsAsync (List<int?> ids)
        {
             ApiResponse<List<Alert>> localVarResponse = await GetAlertsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of Alert type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;Alert&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Alert>>> GetAlertsAsyncWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling AlertsApi->GetAlerts");

            var localVarPath = "/alert/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlerts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Alert>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Alert>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Alert>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of AdminAlertSignal type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AdminAlertSignal&gt;</returns>
        public List<AdminAlertSignal> GetAllAdminAlertSignals ()
        {
             ApiResponse<List<AdminAlertSignal>> localVarResponse = GetAllAdminAlertSignalsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of AdminAlertSignal type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AdminAlertSignal&gt;</returns>
        public ApiResponse< List<AdminAlertSignal> > GetAllAdminAlertSignalsWithHttpInfo ()
        {

            var localVarPath = "/adminAlertSignal/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAdminAlertSignals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AdminAlertSignal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AdminAlertSignal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AdminAlertSignal>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of AdminAlertSignal type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AdminAlertSignal&gt;</returns>
        public async System.Threading.Tasks.Task<List<AdminAlertSignal>> GetAllAdminAlertSignalsAsync ()
        {
             ApiResponse<List<AdminAlertSignal>> localVarResponse = await GetAllAdminAlertSignalsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of AdminAlertSignal type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AdminAlertSignal&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AdminAlertSignal>>> GetAllAdminAlertSignalsAsyncWithHttpInfo ()
        {

            var localVarPath = "/adminAlertSignal/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAdminAlertSignals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AdminAlertSignal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AdminAlertSignal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AdminAlertSignal>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of AlertSignal type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AlertSignal&gt;</returns>
        public List<AlertSignal> GetAllAlertSignals ()
        {
             ApiResponse<List<AlertSignal>> localVarResponse = GetAllAlertSignalsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of AlertSignal type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AlertSignal&gt;</returns>
        public ApiResponse< List<AlertSignal> > GetAllAlertSignalsWithHttpInfo ()
        {

            var localVarPath = "/alertSignal/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAlertSignals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AlertSignal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AlertSignal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AlertSignal>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of AlertSignal type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AlertSignal&gt;</returns>
        public async System.Threading.Tasks.Task<List<AlertSignal>> GetAllAlertSignalsAsync ()
        {
             ApiResponse<List<AlertSignal>> localVarResponse = await GetAllAlertSignalsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of AlertSignal type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AlertSignal&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AlertSignal>>> GetAllAlertSignalsAsyncWithHttpInfo ()
        {

            var localVarPath = "/alertSignal/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAlertSignals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AlertSignal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AlertSignal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AlertSignal>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of Alert type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Alert&gt;</returns>
        public List<Alert> GetAllAlerts ()
        {
             ApiResponse<List<Alert>> localVarResponse = GetAllAlertsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of Alert type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Alert&gt;</returns>
        public ApiResponse< List<Alert> > GetAllAlertsWithHttpInfo ()
        {

            var localVarPath = "/alert/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAlerts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Alert>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Alert>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Alert>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of Alert type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Alert&gt;</returns>
        public async System.Threading.Tasks.Task<List<Alert>> GetAllAlertsAsync ()
        {
             ApiResponse<List<Alert>> localVarResponse = await GetAllAlertsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of Alert type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Alert&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Alert>>> GetAllAlertsAsyncWithHttpInfo ()
        {

            var localVarPath = "/alert/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAlerts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Alert>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Alert>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Alert>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of AdminAlertSignal type related to AdminAlert entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of AdminAlert entity</param>
        /// <returns>List&lt;AdminAlertSignal&gt;</returns>
        public List<AdminAlertSignal> GetOwnedAdminAlertSignals (int? masterid)
        {
             ApiResponse<List<AdminAlertSignal>> localVarResponse = GetOwnedAdminAlertSignalsWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of AdminAlertSignal type related to AdminAlert entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of AdminAlert entity</param>
        /// <returns>ApiResponse of List&lt;AdminAlertSignal&gt;</returns>
        public ApiResponse< List<AdminAlertSignal> > GetOwnedAdminAlertSignalsWithHttpInfo (int? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling AlertsApi->GetOwnedAdminAlertSignals");

            var localVarPath = "/adminAlertSignal/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterid != null) localVarQueryParams.Add("masterid", Configuration.ApiClient.ParameterToString(masterid)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedAdminAlertSignals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AdminAlertSignal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AdminAlertSignal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AdminAlertSignal>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of AdminAlertSignal type related to AdminAlert entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of AdminAlert entity</param>
        /// <returns>Task of List&lt;AdminAlertSignal&gt;</returns>
        public async System.Threading.Tasks.Task<List<AdminAlertSignal>> GetOwnedAdminAlertSignalsAsync (int? masterid)
        {
             ApiResponse<List<AdminAlertSignal>> localVarResponse = await GetOwnedAdminAlertSignalsAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of AdminAlertSignal type related to AdminAlert entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of AdminAlert entity</param>
        /// <returns>Task of ApiResponse (List&lt;AdminAlertSignal&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AdminAlertSignal>>> GetOwnedAdminAlertSignalsAsyncWithHttpInfo (int? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling AlertsApi->GetOwnedAdminAlertSignals");

            var localVarPath = "/adminAlertSignal/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterid != null) localVarQueryParams.Add("masterid", Configuration.ApiClient.ParameterToString(masterid)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedAdminAlertSignals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AdminAlertSignal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AdminAlertSignal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AdminAlertSignal>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of AdminAlertSignal type related to multiple entities of AdminAlert type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of AdminAlert entities</param>
        /// <returns>List&lt;AdminAlertSignal&gt;</returns>
        public List<AdminAlertSignal> GetOwnedAdminAlertSignalsBatch (List<int?> masterids)
        {
             ApiResponse<List<AdminAlertSignal>> localVarResponse = GetOwnedAdminAlertSignalsBatchWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of AdminAlertSignal type related to multiple entities of AdminAlert type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of AdminAlert entities</param>
        /// <returns>ApiResponse of List&lt;AdminAlertSignal&gt;</returns>
        public ApiResponse< List<AdminAlertSignal> > GetOwnedAdminAlertSignalsBatchWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling AlertsApi->GetOwnedAdminAlertSignalsBatch");

            var localVarPath = "/adminAlertSignal/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterids != null) localVarQueryParams.Add("masterids", Configuration.ApiClient.ParameterToString(masterids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedAdminAlertSignalsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AdminAlertSignal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AdminAlertSignal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AdminAlertSignal>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of AdminAlertSignal type related to multiple entities of AdminAlert type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of AdminAlert entities</param>
        /// <returns>Task of List&lt;AdminAlertSignal&gt;</returns>
        public async System.Threading.Tasks.Task<List<AdminAlertSignal>> GetOwnedAdminAlertSignalsBatchAsync (List<int?> masterids)
        {
             ApiResponse<List<AdminAlertSignal>> localVarResponse = await GetOwnedAdminAlertSignalsBatchAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of AdminAlertSignal type related to multiple entities of AdminAlert type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of AdminAlert entities</param>
        /// <returns>Task of ApiResponse (List&lt;AdminAlertSignal&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AdminAlertSignal>>> GetOwnedAdminAlertSignalsBatchAsyncWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling AlertsApi->GetOwnedAdminAlertSignalsBatch");

            var localVarPath = "/adminAlertSignal/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterids != null) localVarQueryParams.Add("masterids", Configuration.ApiClient.ParameterToString(masterids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedAdminAlertSignalsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AdminAlertSignal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AdminAlertSignal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AdminAlertSignal>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of AlertSignal type related to Alert entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Alert entity</param>
        /// <returns>List&lt;AlertSignal&gt;</returns>
        public List<AlertSignal> GetOwnedAlertSignals (int? masterid)
        {
             ApiResponse<List<AlertSignal>> localVarResponse = GetOwnedAlertSignalsWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of AlertSignal type related to Alert entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Alert entity</param>
        /// <returns>ApiResponse of List&lt;AlertSignal&gt;</returns>
        public ApiResponse< List<AlertSignal> > GetOwnedAlertSignalsWithHttpInfo (int? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling AlertsApi->GetOwnedAlertSignals");

            var localVarPath = "/alertSignal/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterid != null) localVarQueryParams.Add("masterid", Configuration.ApiClient.ParameterToString(masterid)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedAlertSignals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AlertSignal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AlertSignal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AlertSignal>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of AlertSignal type related to Alert entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Alert entity</param>
        /// <returns>Task of List&lt;AlertSignal&gt;</returns>
        public async System.Threading.Tasks.Task<List<AlertSignal>> GetOwnedAlertSignalsAsync (int? masterid)
        {
             ApiResponse<List<AlertSignal>> localVarResponse = await GetOwnedAlertSignalsAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of AlertSignal type related to Alert entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Alert entity</param>
        /// <returns>Task of ApiResponse (List&lt;AlertSignal&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AlertSignal>>> GetOwnedAlertSignalsAsyncWithHttpInfo (int? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling AlertsApi->GetOwnedAlertSignals");

            var localVarPath = "/alertSignal/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterid != null) localVarQueryParams.Add("masterid", Configuration.ApiClient.ParameterToString(masterid)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedAlertSignals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AlertSignal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AlertSignal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AlertSignal>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of AlertSignal type related to multiple entities of Alert type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Alert entities</param>
        /// <returns>List&lt;AlertSignal&gt;</returns>
        public List<AlertSignal> GetOwnedAlertSignalsBatch (List<int?> masterids)
        {
             ApiResponse<List<AlertSignal>> localVarResponse = GetOwnedAlertSignalsBatchWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of AlertSignal type related to multiple entities of Alert type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Alert entities</param>
        /// <returns>ApiResponse of List&lt;AlertSignal&gt;</returns>
        public ApiResponse< List<AlertSignal> > GetOwnedAlertSignalsBatchWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling AlertsApi->GetOwnedAlertSignalsBatch");

            var localVarPath = "/alertSignal/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterids != null) localVarQueryParams.Add("masterids", Configuration.ApiClient.ParameterToString(masterids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedAlertSignalsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AlertSignal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AlertSignal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AlertSignal>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of AlertSignal type related to multiple entities of Alert type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Alert entities</param>
        /// <returns>Task of List&lt;AlertSignal&gt;</returns>
        public async System.Threading.Tasks.Task<List<AlertSignal>> GetOwnedAlertSignalsBatchAsync (List<int?> masterids)
        {
             ApiResponse<List<AlertSignal>> localVarResponse = await GetOwnedAlertSignalsBatchAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of AlertSignal type related to multiple entities of Alert type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Alert entities</param>
        /// <returns>Task of ApiResponse (List&lt;AlertSignal&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AlertSignal>>> GetOwnedAlertSignalsBatchAsyncWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling AlertsApi->GetOwnedAlertSignalsBatch");

            var localVarPath = "/alertSignal/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterids != null) localVarQueryParams.Add("masterids", Configuration.ApiClient.ParameterToString(masterids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedAlertSignalsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AlertSignal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AlertSignal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AlertSignal>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of Alert type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>List&lt;Alert&gt;</returns>
        public List<Alert> GetOwnedAlerts (int? masterid)
        {
             ApiResponse<List<Alert>> localVarResponse = GetOwnedAlertsWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of Alert type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>ApiResponse of List&lt;Alert&gt;</returns>
        public ApiResponse< List<Alert> > GetOwnedAlertsWithHttpInfo (int? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling AlertsApi->GetOwnedAlerts");

            var localVarPath = "/alert/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterid != null) localVarQueryParams.Add("masterid", Configuration.ApiClient.ParameterToString(masterid)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedAlerts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Alert>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Alert>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Alert>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of Alert type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of List&lt;Alert&gt;</returns>
        public async System.Threading.Tasks.Task<List<Alert>> GetOwnedAlertsAsync (int? masterid)
        {
             ApiResponse<List<Alert>> localVarResponse = await GetOwnedAlertsAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of Alert type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of ApiResponse (List&lt;Alert&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Alert>>> GetOwnedAlertsAsyncWithHttpInfo (int? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling AlertsApi->GetOwnedAlerts");

            var localVarPath = "/alert/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterid != null) localVarQueryParams.Add("masterid", Configuration.ApiClient.ParameterToString(masterid)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedAlerts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Alert>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Alert>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Alert>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of Alert type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>List&lt;Alert&gt;</returns>
        public List<Alert> GetOwnedAlertsBatch (List<int?> masterids)
        {
             ApiResponse<List<Alert>> localVarResponse = GetOwnedAlertsBatchWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of Alert type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>ApiResponse of List&lt;Alert&gt;</returns>
        public ApiResponse< List<Alert> > GetOwnedAlertsBatchWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling AlertsApi->GetOwnedAlertsBatch");

            var localVarPath = "/alert/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterids != null) localVarQueryParams.Add("masterids", Configuration.ApiClient.ParameterToString(masterids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedAlertsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Alert>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Alert>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Alert>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of Alert type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of List&lt;Alert&gt;</returns>
        public async System.Threading.Tasks.Task<List<Alert>> GetOwnedAlertsBatchAsync (List<int?> masterids)
        {
             ApiResponse<List<Alert>> localVarResponse = await GetOwnedAlertsBatchAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of Alert type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of ApiResponse (List&lt;Alert&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Alert>>> GetOwnedAlertsBatchAsyncWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling AlertsApi->GetOwnedAlertsBatch");

            var localVarPath = "/alert/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterids != null) localVarQueryParams.Add("masterids", Configuration.ApiClient.ParameterToString(masterids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedAlertsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Alert>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Alert>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Alert>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AlertResponse</returns>
        public AlertResponse MarkReadAlertSignal (MarkReadAlertSignal body)
        {
             ApiResponse<AlertResponse> localVarResponse = MarkReadAlertSignalWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AlertResponse</returns>
        public ApiResponse< AlertResponse > MarkReadAlertSignalWithHttpInfo (MarkReadAlertSignal body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertsApi->MarkReadAlertSignal");

            var localVarPath = "/alert/markreadalertsignal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkReadAlertSignal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AlertResponse</returns>
        public async System.Threading.Tasks.Task<AlertResponse> MarkReadAlertSignalAsync (MarkReadAlertSignal body)
        {
             ApiResponse<AlertResponse> localVarResponse = await MarkReadAlertSignalAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AlertResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlertResponse>> MarkReadAlertSignalAsyncWithHttpInfo (MarkReadAlertSignal body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertsApi->MarkReadAlertSignal");

            var localVarPath = "/alert/markreadalertsignal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkReadAlertSignal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AlertResponse</returns>
        public AlertResponse ModifyAlert (ModifyAlert body)
        {
             ApiResponse<AlertResponse> localVarResponse = ModifyAlertWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AlertResponse</returns>
        public ApiResponse< AlertResponse > ModifyAlertWithHttpInfo (ModifyAlert body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertsApi->ModifyAlert");

            var localVarPath = "/alert/modifyalert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyAlert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AlertResponse</returns>
        public async System.Threading.Tasks.Task<AlertResponse> ModifyAlertAsync (ModifyAlert body)
        {
             ApiResponse<AlertResponse> localVarResponse = await ModifyAlertAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AlertResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlertResponse>> ModifyAlertAsyncWithHttpInfo (ModifyAlert body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertsApi->ModifyAlert");

            var localVarPath = "/alert/modifyalert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyAlert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AlertResponse</returns>
        public AlertResponse ResetAlert (ResetAlert body)
        {
             ApiResponse<AlertResponse> localVarResponse = ResetAlertWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AlertResponse</returns>
        public ApiResponse< AlertResponse > ResetAlertWithHttpInfo (ResetAlert body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertsApi->ResetAlert");

            var localVarPath = "/alert/resetalert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetAlert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AlertResponse</returns>
        public async System.Threading.Tasks.Task<AlertResponse> ResetAlertAsync (ResetAlert body)
        {
             ApiResponse<AlertResponse> localVarResponse = await ResetAlertAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AlertResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlertResponse>> ResetAlertAsyncWithHttpInfo (ResetAlert body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertsApi->ResetAlert");

            var localVarPath = "/alert/resetalert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetAlert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AdminAlertSignalResponse</returns>
        public AdminAlertSignalResponse TakeAlertSignalOwnership (TakeAlertSignalOwnership body)
        {
             ApiResponse<AdminAlertSignalResponse> localVarResponse = TakeAlertSignalOwnershipWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AdminAlertSignalResponse</returns>
        public ApiResponse< AdminAlertSignalResponse > TakeAlertSignalOwnershipWithHttpInfo (TakeAlertSignalOwnership body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertsApi->TakeAlertSignalOwnership");

            var localVarPath = "/adminAlertSignal/takealertsignalownership";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TakeAlertSignalOwnership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdminAlertSignalResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdminAlertSignalResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminAlertSignalResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AdminAlertSignalResponse</returns>
        public async System.Threading.Tasks.Task<AdminAlertSignalResponse> TakeAlertSignalOwnershipAsync (TakeAlertSignalOwnership body)
        {
             ApiResponse<AdminAlertSignalResponse> localVarResponse = await TakeAlertSignalOwnershipAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AdminAlertSignalResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdminAlertSignalResponse>> TakeAlertSignalOwnershipAsyncWithHttpInfo (TakeAlertSignalOwnership body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertsApi->TakeAlertSignalOwnership");

            var localVarPath = "/adminAlertSignal/takealertsignalownership";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TakeAlertSignalOwnership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdminAlertSignalResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdminAlertSignalResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminAlertSignalResponse)));
            
        }

    }
}
