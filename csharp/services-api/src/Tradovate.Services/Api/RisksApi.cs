/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tradovate.Services.Client;
using Tradovate.Services.Model;

namespace Tradovate.Services.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRisksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of UserAccountAutoLiq
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UserAccountAutoLiq</returns>
        UserAccountAutoLiq CreateUserAccountAutoLiq (UserAccountAutoLiq body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of UserAccountAutoLiq
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserAccountAutoLiq</returns>
        ApiResponse<UserAccountAutoLiq> CreateUserAccountAutoLiqWithHttpInfo (UserAccountAutoLiq body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of UserAccountPositionLimit
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UserAccountPositionLimit</returns>
        UserAccountPositionLimit CreateUserAccountPositionLimit (UserAccountPositionLimit body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of UserAccountPositionLimit
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserAccountPositionLimit</returns>
        ApiResponse<UserAccountPositionLimit> CreateUserAccountPositionLimitWithHttpInfo (UserAccountPositionLimit body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of UserAccountRiskParameter
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UserAccountRiskParameter</returns>
        UserAccountRiskParameter CreateUserAccountRiskParameter (UserAccountRiskParameter body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of UserAccountRiskParameter
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserAccountRiskParameter</returns>
        ApiResponse<UserAccountRiskParameter> CreateUserAccountRiskParameterWithHttpInfo (UserAccountRiskParameter body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteResultResponse</returns>
        DeleteResultResponse DeleteUserAccountPositionLimit (DeleteUserAccountPositionLimit body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteResultResponse</returns>
        ApiResponse<DeleteResultResponse> DeleteUserAccountPositionLimitWithHttpInfo (DeleteUserAccountPositionLimit body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteResultResponse</returns>
        DeleteResultResponse DeleteUserAccountRiskParameter (DeleteUserAccountRiskParameter body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteResultResponse</returns>
        ApiResponse<DeleteResultResponse> DeleteUserAccountRiskParameterWithHttpInfo (DeleteUserAccountRiskParameter body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ProductMargin type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProductMargin&gt;</returns>
        List<ProductMargin> GetAllProductMargins ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ProductMargin type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProductMargin&gt;</returns>
        ApiResponse<List<ProductMargin>> GetAllProductMarginsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountAutoLiq type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserAccountAutoLiq&gt;</returns>
        List<UserAccountAutoLiq> GetAllUserAccountAutoLiqs ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountAutoLiq type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserAccountAutoLiq&gt;</returns>
        ApiResponse<List<UserAccountAutoLiq>> GetAllUserAccountAutoLiqsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ContractMargin type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ContractMargin</returns>
        ContractMargin GetContractMargin (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ContractMargin type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContractMargin</returns>
        ApiResponse<ContractMargin> GetContractMarginWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ContractMargin type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;ContractMargin&gt;</returns>
        List<ContractMargin> GetContractMargins (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ContractMargin type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;ContractMargin&gt;</returns>
        ApiResponse<List<ContractMargin>> GetContractMarginsWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContractMargin type related to Contract entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Contract entity</param>
        /// <returns>List&lt;ContractMargin&gt;</returns>
        List<ContractMargin> GetOwnedContractMargins (int? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContractMargin type related to Contract entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Contract entity</param>
        /// <returns>ApiResponse of List&lt;ContractMargin&gt;</returns>
        ApiResponse<List<ContractMargin>> GetOwnedContractMarginsWithHttpInfo (int? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContractMargin type related to multiple entities of Contract type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Contract entities</param>
        /// <returns>List&lt;ContractMargin&gt;</returns>
        List<ContractMargin> GetOwnedContractMarginsBatch (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContractMargin type related to multiple entities of Contract type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Contract entities</param>
        /// <returns>ApiResponse of List&lt;ContractMargin&gt;</returns>
        ApiResponse<List<ContractMargin>> GetOwnedContractMarginsBatchWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ProductMargin type related to Product entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>List&lt;ProductMargin&gt;</returns>
        List<ProductMargin> GetOwnedProductMargins (int? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ProductMargin type related to Product entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>ApiResponse of List&lt;ProductMargin&gt;</returns>
        ApiResponse<List<ProductMargin>> GetOwnedProductMarginsWithHttpInfo (int? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ProductMargin type related to multiple entities of Product type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>List&lt;ProductMargin&gt;</returns>
        List<ProductMargin> GetOwnedProductMarginsBatch (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ProductMargin type related to multiple entities of Product type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>ApiResponse of List&lt;ProductMargin&gt;</returns>
        ApiResponse<List<ProductMargin>> GetOwnedProductMarginsBatchWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountAutoLiq type related to Account entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>List&lt;UserAccountAutoLiq&gt;</returns>
        List<UserAccountAutoLiq> GetOwnedUserAccountAutoLiqs (int? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountAutoLiq type related to Account entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>ApiResponse of List&lt;UserAccountAutoLiq&gt;</returns>
        ApiResponse<List<UserAccountAutoLiq>> GetOwnedUserAccountAutoLiqsWithHttpInfo (int? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountAutoLiq type related to multiple entities of Account type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>List&lt;UserAccountAutoLiq&gt;</returns>
        List<UserAccountAutoLiq> GetOwnedUserAccountAutoLiqsBatch (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountAutoLiq type related to multiple entities of Account type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>ApiResponse of List&lt;UserAccountAutoLiq&gt;</returns>
        ApiResponse<List<UserAccountAutoLiq>> GetOwnedUserAccountAutoLiqsBatchWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountPositionLimit type related to Account entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>List&lt;UserAccountPositionLimit&gt;</returns>
        List<UserAccountPositionLimit> GetOwnedUserAccountPositionLimits (int? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountPositionLimit type related to Account entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>ApiResponse of List&lt;UserAccountPositionLimit&gt;</returns>
        ApiResponse<List<UserAccountPositionLimit>> GetOwnedUserAccountPositionLimitsWithHttpInfo (int? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountPositionLimit type related to multiple entities of Account type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>List&lt;UserAccountPositionLimit&gt;</returns>
        List<UserAccountPositionLimit> GetOwnedUserAccountPositionLimitsBatch (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountPositionLimit type related to multiple entities of Account type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>ApiResponse of List&lt;UserAccountPositionLimit&gt;</returns>
        ApiResponse<List<UserAccountPositionLimit>> GetOwnedUserAccountPositionLimitsBatchWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountRiskParameter type related to UserAccountPositionLimit entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of UserAccountPositionLimit entity</param>
        /// <returns>List&lt;UserAccountRiskParameter&gt;</returns>
        List<UserAccountRiskParameter> GetOwnedUserAccountRiskParameters (int? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountRiskParameter type related to UserAccountPositionLimit entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of UserAccountPositionLimit entity</param>
        /// <returns>ApiResponse of List&lt;UserAccountRiskParameter&gt;</returns>
        ApiResponse<List<UserAccountRiskParameter>> GetOwnedUserAccountRiskParametersWithHttpInfo (int? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountRiskParameter type related to multiple entities of UserAccountPositionLimit type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of UserAccountPositionLimit entities</param>
        /// <returns>List&lt;UserAccountRiskParameter&gt;</returns>
        List<UserAccountRiskParameter> GetOwnedUserAccountRiskParametersBatch (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountRiskParameter type related to multiple entities of UserAccountPositionLimit type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of UserAccountPositionLimit entities</param>
        /// <returns>ApiResponse of List&lt;UserAccountRiskParameter&gt;</returns>
        ApiResponse<List<UserAccountRiskParameter>> GetOwnedUserAccountRiskParametersBatchWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ProductMargin type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ProductMargin</returns>
        ProductMargin GetProductMargin (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ProductMargin type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ProductMargin</returns>
        ApiResponse<ProductMargin> GetProductMarginWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ProductMargin type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;ProductMargin&gt;</returns>
        List<ProductMargin> GetProductMargins (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ProductMargin type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;ProductMargin&gt;</returns>
        ApiResponse<List<ProductMargin>> GetProductMarginsWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserAccountAutoLiq type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserAccountAutoLiq</returns>
        UserAccountAutoLiq GetUserAccountAutoLiq (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserAccountAutoLiq type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserAccountAutoLiq</returns>
        ApiResponse<UserAccountAutoLiq> GetUserAccountAutoLiqWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserAccountAutoLiq type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;UserAccountAutoLiq&gt;</returns>
        List<UserAccountAutoLiq> GetUserAccountAutoLiqs (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserAccountAutoLiq type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;UserAccountAutoLiq&gt;</returns>
        ApiResponse<List<UserAccountAutoLiq>> GetUserAccountAutoLiqsWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserAccountPositionLimit type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserAccountPositionLimit</returns>
        UserAccountPositionLimit GetUserAccountPositionLimit (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserAccountPositionLimit type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserAccountPositionLimit</returns>
        ApiResponse<UserAccountPositionLimit> GetUserAccountPositionLimitWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserAccountPositionLimit type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;UserAccountPositionLimit&gt;</returns>
        List<UserAccountPositionLimit> GetUserAccountPositionLimits (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserAccountPositionLimit type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;UserAccountPositionLimit&gt;</returns>
        ApiResponse<List<UserAccountPositionLimit>> GetUserAccountPositionLimitsWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserAccountRiskParameter type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserAccountRiskParameter</returns>
        UserAccountRiskParameter GetUserAccountRiskParameter (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserAccountRiskParameter type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserAccountRiskParameter</returns>
        ApiResponse<UserAccountRiskParameter> GetUserAccountRiskParameterWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserAccountRiskParameter type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;UserAccountRiskParameter&gt;</returns>
        List<UserAccountRiskParameter> GetUserAccountRiskParameters (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserAccountRiskParameter type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;UserAccountRiskParameter&gt;</returns>
        ApiResponse<List<UserAccountRiskParameter>> GetUserAccountRiskParametersWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of UserAccountAutoLiq
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UserAccountAutoLiq</returns>
        UserAccountAutoLiq UpdateUserAccountAutoLiq (UserAccountAutoLiq body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of UserAccountAutoLiq
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserAccountAutoLiq</returns>
        ApiResponse<UserAccountAutoLiq> UpdateUserAccountAutoLiqWithHttpInfo (UserAccountAutoLiq body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of UserAccountPositionLimit
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UserAccountPositionLimit</returns>
        UserAccountPositionLimit UpdateUserAccountPositionLimit (UserAccountPositionLimit body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of UserAccountPositionLimit
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserAccountPositionLimit</returns>
        ApiResponse<UserAccountPositionLimit> UpdateUserAccountPositionLimitWithHttpInfo (UserAccountPositionLimit body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of UserAccountRiskParameter
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UserAccountRiskParameter</returns>
        UserAccountRiskParameter UpdateUserAccountRiskParameter (UserAccountRiskParameter body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of UserAccountRiskParameter
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserAccountRiskParameter</returns>
        ApiResponse<UserAccountRiskParameter> UpdateUserAccountRiskParameterWithHttpInfo (UserAccountRiskParameter body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of UserAccountAutoLiq
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UserAccountAutoLiq</returns>
        System.Threading.Tasks.Task<UserAccountAutoLiq> CreateUserAccountAutoLiqAsync (UserAccountAutoLiq body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of UserAccountAutoLiq
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserAccountAutoLiq)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAccountAutoLiq>> CreateUserAccountAutoLiqAsyncWithHttpInfo (UserAccountAutoLiq body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of UserAccountPositionLimit
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UserAccountPositionLimit</returns>
        System.Threading.Tasks.Task<UserAccountPositionLimit> CreateUserAccountPositionLimitAsync (UserAccountPositionLimit body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of UserAccountPositionLimit
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserAccountPositionLimit)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAccountPositionLimit>> CreateUserAccountPositionLimitAsyncWithHttpInfo (UserAccountPositionLimit body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of UserAccountRiskParameter
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UserAccountRiskParameter</returns>
        System.Threading.Tasks.Task<UserAccountRiskParameter> CreateUserAccountRiskParameterAsync (UserAccountRiskParameter body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new entity of UserAccountRiskParameter
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserAccountRiskParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAccountRiskParameter>> CreateUserAccountRiskParameterAsyncWithHttpInfo (UserAccountRiskParameter body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of DeleteResultResponse</returns>
        System.Threading.Tasks.Task<DeleteResultResponse> DeleteUserAccountPositionLimitAsync (DeleteUserAccountPositionLimit body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DeleteResultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteResultResponse>> DeleteUserAccountPositionLimitAsyncWithHttpInfo (DeleteUserAccountPositionLimit body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of DeleteResultResponse</returns>
        System.Threading.Tasks.Task<DeleteResultResponse> DeleteUserAccountRiskParameterAsync (DeleteUserAccountRiskParameter body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DeleteResultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteResultResponse>> DeleteUserAccountRiskParameterAsyncWithHttpInfo (DeleteUserAccountRiskParameter body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ProductMargin type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProductMargin&gt;</returns>
        System.Threading.Tasks.Task<List<ProductMargin>> GetAllProductMarginsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ProductMargin type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProductMargin&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductMargin>>> GetAllProductMarginsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountAutoLiq type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UserAccountAutoLiq&gt;</returns>
        System.Threading.Tasks.Task<List<UserAccountAutoLiq>> GetAllUserAccountAutoLiqsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountAutoLiq type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UserAccountAutoLiq&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserAccountAutoLiq>>> GetAllUserAccountAutoLiqsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ContractMargin type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ContractMargin</returns>
        System.Threading.Tasks.Task<ContractMargin> GetContractMarginAsync (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ContractMargin type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContractMargin)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContractMargin>> GetContractMarginAsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ContractMargin type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;ContractMargin&gt;</returns>
        System.Threading.Tasks.Task<List<ContractMargin>> GetContractMarginsAsync (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ContractMargin type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;ContractMargin&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContractMargin>>> GetContractMarginsAsyncWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContractMargin type related to Contract entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Contract entity</param>
        /// <returns>Task of List&lt;ContractMargin&gt;</returns>
        System.Threading.Tasks.Task<List<ContractMargin>> GetOwnedContractMarginsAsync (int? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContractMargin type related to Contract entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Contract entity</param>
        /// <returns>Task of ApiResponse (List&lt;ContractMargin&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContractMargin>>> GetOwnedContractMarginsAsyncWithHttpInfo (int? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContractMargin type related to multiple entities of Contract type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Contract entities</param>
        /// <returns>Task of List&lt;ContractMargin&gt;</returns>
        System.Threading.Tasks.Task<List<ContractMargin>> GetOwnedContractMarginsBatchAsync (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ContractMargin type related to multiple entities of Contract type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Contract entities</param>
        /// <returns>Task of ApiResponse (List&lt;ContractMargin&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContractMargin>>> GetOwnedContractMarginsBatchAsyncWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ProductMargin type related to Product entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>Task of List&lt;ProductMargin&gt;</returns>
        System.Threading.Tasks.Task<List<ProductMargin>> GetOwnedProductMarginsAsync (int? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ProductMargin type related to Product entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>Task of ApiResponse (List&lt;ProductMargin&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductMargin>>> GetOwnedProductMarginsAsyncWithHttpInfo (int? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ProductMargin type related to multiple entities of Product type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>Task of List&lt;ProductMargin&gt;</returns>
        System.Threading.Tasks.Task<List<ProductMargin>> GetOwnedProductMarginsBatchAsync (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ProductMargin type related to multiple entities of Product type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>Task of ApiResponse (List&lt;ProductMargin&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductMargin>>> GetOwnedProductMarginsBatchAsyncWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountAutoLiq type related to Account entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>Task of List&lt;UserAccountAutoLiq&gt;</returns>
        System.Threading.Tasks.Task<List<UserAccountAutoLiq>> GetOwnedUserAccountAutoLiqsAsync (int? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountAutoLiq type related to Account entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>Task of ApiResponse (List&lt;UserAccountAutoLiq&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserAccountAutoLiq>>> GetOwnedUserAccountAutoLiqsAsyncWithHttpInfo (int? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountAutoLiq type related to multiple entities of Account type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>Task of List&lt;UserAccountAutoLiq&gt;</returns>
        System.Threading.Tasks.Task<List<UserAccountAutoLiq>> GetOwnedUserAccountAutoLiqsBatchAsync (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountAutoLiq type related to multiple entities of Account type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>Task of ApiResponse (List&lt;UserAccountAutoLiq&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserAccountAutoLiq>>> GetOwnedUserAccountAutoLiqsBatchAsyncWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountPositionLimit type related to Account entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>Task of List&lt;UserAccountPositionLimit&gt;</returns>
        System.Threading.Tasks.Task<List<UserAccountPositionLimit>> GetOwnedUserAccountPositionLimitsAsync (int? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountPositionLimit type related to Account entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>Task of ApiResponse (List&lt;UserAccountPositionLimit&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserAccountPositionLimit>>> GetOwnedUserAccountPositionLimitsAsyncWithHttpInfo (int? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountPositionLimit type related to multiple entities of Account type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>Task of List&lt;UserAccountPositionLimit&gt;</returns>
        System.Threading.Tasks.Task<List<UserAccountPositionLimit>> GetOwnedUserAccountPositionLimitsBatchAsync (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountPositionLimit type related to multiple entities of Account type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>Task of ApiResponse (List&lt;UserAccountPositionLimit&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserAccountPositionLimit>>> GetOwnedUserAccountPositionLimitsBatchAsyncWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountRiskParameter type related to UserAccountPositionLimit entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of UserAccountPositionLimit entity</param>
        /// <returns>Task of List&lt;UserAccountRiskParameter&gt;</returns>
        System.Threading.Tasks.Task<List<UserAccountRiskParameter>> GetOwnedUserAccountRiskParametersAsync (int? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountRiskParameter type related to UserAccountPositionLimit entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of UserAccountPositionLimit entity</param>
        /// <returns>Task of ApiResponse (List&lt;UserAccountRiskParameter&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserAccountRiskParameter>>> GetOwnedUserAccountRiskParametersAsyncWithHttpInfo (int? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountRiskParameter type related to multiple entities of UserAccountPositionLimit type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of UserAccountPositionLimit entities</param>
        /// <returns>Task of List&lt;UserAccountRiskParameter&gt;</returns>
        System.Threading.Tasks.Task<List<UserAccountRiskParameter>> GetOwnedUserAccountRiskParametersBatchAsync (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of UserAccountRiskParameter type related to multiple entities of UserAccountPositionLimit type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of UserAccountPositionLimit entities</param>
        /// <returns>Task of ApiResponse (List&lt;UserAccountRiskParameter&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserAccountRiskParameter>>> GetOwnedUserAccountRiskParametersBatchAsyncWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ProductMargin type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ProductMargin</returns>
        System.Threading.Tasks.Task<ProductMargin> GetProductMarginAsync (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ProductMargin type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ProductMargin)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductMargin>> GetProductMarginAsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ProductMargin type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;ProductMargin&gt;</returns>
        System.Threading.Tasks.Task<List<ProductMargin>> GetProductMarginsAsync (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ProductMargin type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;ProductMargin&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductMargin>>> GetProductMarginsAsyncWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserAccountAutoLiq type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserAccountAutoLiq</returns>
        System.Threading.Tasks.Task<UserAccountAutoLiq> GetUserAccountAutoLiqAsync (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserAccountAutoLiq type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserAccountAutoLiq)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAccountAutoLiq>> GetUserAccountAutoLiqAsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserAccountAutoLiq type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;UserAccountAutoLiq&gt;</returns>
        System.Threading.Tasks.Task<List<UserAccountAutoLiq>> GetUserAccountAutoLiqsAsync (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserAccountAutoLiq type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;UserAccountAutoLiq&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserAccountAutoLiq>>> GetUserAccountAutoLiqsAsyncWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserAccountPositionLimit type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserAccountPositionLimit</returns>
        System.Threading.Tasks.Task<UserAccountPositionLimit> GetUserAccountPositionLimitAsync (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserAccountPositionLimit type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserAccountPositionLimit)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAccountPositionLimit>> GetUserAccountPositionLimitAsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserAccountPositionLimit type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;UserAccountPositionLimit&gt;</returns>
        System.Threading.Tasks.Task<List<UserAccountPositionLimit>> GetUserAccountPositionLimitsAsync (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserAccountPositionLimit type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;UserAccountPositionLimit&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserAccountPositionLimit>>> GetUserAccountPositionLimitsAsyncWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserAccountRiskParameter type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserAccountRiskParameter</returns>
        System.Threading.Tasks.Task<UserAccountRiskParameter> GetUserAccountRiskParameterAsync (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of UserAccountRiskParameter type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserAccountRiskParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAccountRiskParameter>> GetUserAccountRiskParameterAsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserAccountRiskParameter type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;UserAccountRiskParameter&gt;</returns>
        System.Threading.Tasks.Task<List<UserAccountRiskParameter>> GetUserAccountRiskParametersAsync (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of UserAccountRiskParameter type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;UserAccountRiskParameter&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserAccountRiskParameter>>> GetUserAccountRiskParametersAsyncWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of UserAccountAutoLiq
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UserAccountAutoLiq</returns>
        System.Threading.Tasks.Task<UserAccountAutoLiq> UpdateUserAccountAutoLiqAsync (UserAccountAutoLiq body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of UserAccountAutoLiq
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserAccountAutoLiq)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAccountAutoLiq>> UpdateUserAccountAutoLiqAsyncWithHttpInfo (UserAccountAutoLiq body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of UserAccountPositionLimit
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UserAccountPositionLimit</returns>
        System.Threading.Tasks.Task<UserAccountPositionLimit> UpdateUserAccountPositionLimitAsync (UserAccountPositionLimit body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of UserAccountPositionLimit
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserAccountPositionLimit)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAccountPositionLimit>> UpdateUserAccountPositionLimitAsyncWithHttpInfo (UserAccountPositionLimit body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of UserAccountRiskParameter
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UserAccountRiskParameter</returns>
        System.Threading.Tasks.Task<UserAccountRiskParameter> UpdateUserAccountRiskParameterAsync (UserAccountRiskParameter body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing entity of UserAccountRiskParameter
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserAccountRiskParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAccountRiskParameter>> UpdateUserAccountRiskParameterAsyncWithHttpInfo (UserAccountRiskParameter body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RisksApi : IRisksApi
    {
        private Tradovate.Services.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RisksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RisksApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Tradovate.Services.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RisksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RisksApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tradovate.Services.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tradovate.Services.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Creates a new entity of UserAccountAutoLiq
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UserAccountAutoLiq</returns>
        public UserAccountAutoLiq CreateUserAccountAutoLiq (UserAccountAutoLiq body)
        {
             ApiResponse<UserAccountAutoLiq> localVarResponse = CreateUserAccountAutoLiqWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new entity of UserAccountAutoLiq
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserAccountAutoLiq</returns>
        public ApiResponse< UserAccountAutoLiq > CreateUserAccountAutoLiqWithHttpInfo (UserAccountAutoLiq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RisksApi->CreateUserAccountAutoLiq");

            var localVarPath = "/userAccountAutoLiq/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserAccountAutoLiq", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAccountAutoLiq>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserAccountAutoLiq) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAccountAutoLiq)));
            
        }

        /// <summary>
        ///  Creates a new entity of UserAccountAutoLiq
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UserAccountAutoLiq</returns>
        public async System.Threading.Tasks.Task<UserAccountAutoLiq> CreateUserAccountAutoLiqAsync (UserAccountAutoLiq body)
        {
             ApiResponse<UserAccountAutoLiq> localVarResponse = await CreateUserAccountAutoLiqAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a new entity of UserAccountAutoLiq
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserAccountAutoLiq)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAccountAutoLiq>> CreateUserAccountAutoLiqAsyncWithHttpInfo (UserAccountAutoLiq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RisksApi->CreateUserAccountAutoLiq");

            var localVarPath = "/userAccountAutoLiq/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserAccountAutoLiq", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAccountAutoLiq>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserAccountAutoLiq) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAccountAutoLiq)));
            
        }

        /// <summary>
        ///  Creates a new entity of UserAccountPositionLimit
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UserAccountPositionLimit</returns>
        public UserAccountPositionLimit CreateUserAccountPositionLimit (UserAccountPositionLimit body)
        {
             ApiResponse<UserAccountPositionLimit> localVarResponse = CreateUserAccountPositionLimitWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new entity of UserAccountPositionLimit
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserAccountPositionLimit</returns>
        public ApiResponse< UserAccountPositionLimit > CreateUserAccountPositionLimitWithHttpInfo (UserAccountPositionLimit body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RisksApi->CreateUserAccountPositionLimit");

            var localVarPath = "/userAccountPositionLimit/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserAccountPositionLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAccountPositionLimit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserAccountPositionLimit) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAccountPositionLimit)));
            
        }

        /// <summary>
        ///  Creates a new entity of UserAccountPositionLimit
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UserAccountPositionLimit</returns>
        public async System.Threading.Tasks.Task<UserAccountPositionLimit> CreateUserAccountPositionLimitAsync (UserAccountPositionLimit body)
        {
             ApiResponse<UserAccountPositionLimit> localVarResponse = await CreateUserAccountPositionLimitAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a new entity of UserAccountPositionLimit
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserAccountPositionLimit)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAccountPositionLimit>> CreateUserAccountPositionLimitAsyncWithHttpInfo (UserAccountPositionLimit body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RisksApi->CreateUserAccountPositionLimit");

            var localVarPath = "/userAccountPositionLimit/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserAccountPositionLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAccountPositionLimit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserAccountPositionLimit) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAccountPositionLimit)));
            
        }

        /// <summary>
        ///  Creates a new entity of UserAccountRiskParameter
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UserAccountRiskParameter</returns>
        public UserAccountRiskParameter CreateUserAccountRiskParameter (UserAccountRiskParameter body)
        {
             ApiResponse<UserAccountRiskParameter> localVarResponse = CreateUserAccountRiskParameterWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new entity of UserAccountRiskParameter
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserAccountRiskParameter</returns>
        public ApiResponse< UserAccountRiskParameter > CreateUserAccountRiskParameterWithHttpInfo (UserAccountRiskParameter body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RisksApi->CreateUserAccountRiskParameter");

            var localVarPath = "/userAccountRiskParameter/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserAccountRiskParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAccountRiskParameter>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserAccountRiskParameter) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAccountRiskParameter)));
            
        }

        /// <summary>
        ///  Creates a new entity of UserAccountRiskParameter
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UserAccountRiskParameter</returns>
        public async System.Threading.Tasks.Task<UserAccountRiskParameter> CreateUserAccountRiskParameterAsync (UserAccountRiskParameter body)
        {
             ApiResponse<UserAccountRiskParameter> localVarResponse = await CreateUserAccountRiskParameterAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a new entity of UserAccountRiskParameter
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserAccountRiskParameter)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAccountRiskParameter>> CreateUserAccountRiskParameterAsyncWithHttpInfo (UserAccountRiskParameter body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RisksApi->CreateUserAccountRiskParameter");

            var localVarPath = "/userAccountRiskParameter/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserAccountRiskParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAccountRiskParameter>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserAccountRiskParameter) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAccountRiskParameter)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteResultResponse</returns>
        public DeleteResultResponse DeleteUserAccountPositionLimit (DeleteUserAccountPositionLimit body)
        {
             ApiResponse<DeleteResultResponse> localVarResponse = DeleteUserAccountPositionLimitWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteResultResponse</returns>
        public ApiResponse< DeleteResultResponse > DeleteUserAccountPositionLimitWithHttpInfo (DeleteUserAccountPositionLimit body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RisksApi->DeleteUserAccountPositionLimit");

            var localVarPath = "/userAccountPositionLimit/deleteuseraccountpositionlimit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserAccountPositionLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResultResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteResultResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteResultResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of DeleteResultResponse</returns>
        public async System.Threading.Tasks.Task<DeleteResultResponse> DeleteUserAccountPositionLimitAsync (DeleteUserAccountPositionLimit body)
        {
             ApiResponse<DeleteResultResponse> localVarResponse = await DeleteUserAccountPositionLimitAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DeleteResultResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteResultResponse>> DeleteUserAccountPositionLimitAsyncWithHttpInfo (DeleteUserAccountPositionLimit body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RisksApi->DeleteUserAccountPositionLimit");

            var localVarPath = "/userAccountPositionLimit/deleteuseraccountpositionlimit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserAccountPositionLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResultResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteResultResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteResultResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>DeleteResultResponse</returns>
        public DeleteResultResponse DeleteUserAccountRiskParameter (DeleteUserAccountRiskParameter body)
        {
             ApiResponse<DeleteResultResponse> localVarResponse = DeleteUserAccountRiskParameterWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of DeleteResultResponse</returns>
        public ApiResponse< DeleteResultResponse > DeleteUserAccountRiskParameterWithHttpInfo (DeleteUserAccountRiskParameter body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RisksApi->DeleteUserAccountRiskParameter");

            var localVarPath = "/userAccountPositionLimit/deleteuseraccountriskparameter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserAccountRiskParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResultResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteResultResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteResultResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of DeleteResultResponse</returns>
        public async System.Threading.Tasks.Task<DeleteResultResponse> DeleteUserAccountRiskParameterAsync (DeleteUserAccountRiskParameter body)
        {
             ApiResponse<DeleteResultResponse> localVarResponse = await DeleteUserAccountRiskParameterAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (DeleteResultResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteResultResponse>> DeleteUserAccountRiskParameterAsyncWithHttpInfo (DeleteUserAccountRiskParameter body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RisksApi->DeleteUserAccountRiskParameter");

            var localVarPath = "/userAccountPositionLimit/deleteuseraccountriskparameter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserAccountRiskParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResultResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteResultResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteResultResponse)));
            
        }

        /// <summary>
        ///  Retrieves all entities of ProductMargin type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProductMargin&gt;</returns>
        public List<ProductMargin> GetAllProductMargins ()
        {
             ApiResponse<List<ProductMargin>> localVarResponse = GetAllProductMarginsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of ProductMargin type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProductMargin&gt;</returns>
        public ApiResponse< List<ProductMargin> > GetAllProductMarginsWithHttpInfo ()
        {

            var localVarPath = "/productMargin/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllProductMargins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductMargin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductMargin>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductMargin>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of ProductMargin type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProductMargin&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductMargin>> GetAllProductMarginsAsync ()
        {
             ApiResponse<List<ProductMargin>> localVarResponse = await GetAllProductMarginsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of ProductMargin type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProductMargin&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductMargin>>> GetAllProductMarginsAsyncWithHttpInfo ()
        {

            var localVarPath = "/productMargin/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllProductMargins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductMargin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductMargin>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductMargin>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of UserAccountAutoLiq type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserAccountAutoLiq&gt;</returns>
        public List<UserAccountAutoLiq> GetAllUserAccountAutoLiqs ()
        {
             ApiResponse<List<UserAccountAutoLiq>> localVarResponse = GetAllUserAccountAutoLiqsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of UserAccountAutoLiq type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserAccountAutoLiq&gt;</returns>
        public ApiResponse< List<UserAccountAutoLiq> > GetAllUserAccountAutoLiqsWithHttpInfo ()
        {

            var localVarPath = "/userAccountAutoLiq/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllUserAccountAutoLiqs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserAccountAutoLiq>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserAccountAutoLiq>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserAccountAutoLiq>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of UserAccountAutoLiq type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UserAccountAutoLiq&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserAccountAutoLiq>> GetAllUserAccountAutoLiqsAsync ()
        {
             ApiResponse<List<UserAccountAutoLiq>> localVarResponse = await GetAllUserAccountAutoLiqsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of UserAccountAutoLiq type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UserAccountAutoLiq&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserAccountAutoLiq>>> GetAllUserAccountAutoLiqsAsyncWithHttpInfo ()
        {

            var localVarPath = "/userAccountAutoLiq/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllUserAccountAutoLiqs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserAccountAutoLiq>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserAccountAutoLiq>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserAccountAutoLiq>)));
            
        }

        /// <summary>
        ///  Retrieves an entity of ContractMargin type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ContractMargin</returns>
        public ContractMargin GetContractMargin (int? id)
        {
             ApiResponse<ContractMargin> localVarResponse = GetContractMarginWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of ContractMargin type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContractMargin</returns>
        public ApiResponse< ContractMargin > GetContractMarginWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RisksApi->GetContractMargin");

            var localVarPath = "/contractMargin/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContractMargin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContractMargin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContractMargin) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContractMargin)));
            
        }

        /// <summary>
        ///  Retrieves an entity of ContractMargin type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ContractMargin</returns>
        public async System.Threading.Tasks.Task<ContractMargin> GetContractMarginAsync (int? id)
        {
             ApiResponse<ContractMargin> localVarResponse = await GetContractMarginAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of ContractMargin type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContractMargin)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContractMargin>> GetContractMarginAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RisksApi->GetContractMargin");

            var localVarPath = "/contractMargin/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContractMargin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContractMargin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContractMargin) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContractMargin)));
            
        }

        /// <summary>
        ///  Retrieves multiple entities of ContractMargin type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;ContractMargin&gt;</returns>
        public List<ContractMargin> GetContractMargins (List<int?> ids)
        {
             ApiResponse<List<ContractMargin>> localVarResponse = GetContractMarginsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of ContractMargin type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;ContractMargin&gt;</returns>
        public ApiResponse< List<ContractMargin> > GetContractMarginsWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RisksApi->GetContractMargins");

            var localVarPath = "/contractMargin/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContractMargins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContractMargin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ContractMargin>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContractMargin>)));
            
        }

        /// <summary>
        ///  Retrieves multiple entities of ContractMargin type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;ContractMargin&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContractMargin>> GetContractMarginsAsync (List<int?> ids)
        {
             ApiResponse<List<ContractMargin>> localVarResponse = await GetContractMarginsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of ContractMargin type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;ContractMargin&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ContractMargin>>> GetContractMarginsAsyncWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RisksApi->GetContractMargins");

            var localVarPath = "/contractMargin/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContractMargins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContractMargin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ContractMargin>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContractMargin>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of ContractMargin type related to Contract entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Contract entity</param>
        /// <returns>List&lt;ContractMargin&gt;</returns>
        public List<ContractMargin> GetOwnedContractMargins (int? masterid)
        {
             ApiResponse<List<ContractMargin>> localVarResponse = GetOwnedContractMarginsWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of ContractMargin type related to Contract entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Contract entity</param>
        /// <returns>ApiResponse of List&lt;ContractMargin&gt;</returns>
        public ApiResponse< List<ContractMargin> > GetOwnedContractMarginsWithHttpInfo (int? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling RisksApi->GetOwnedContractMargins");

            var localVarPath = "/contractMargin/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterid != null) localVarQueryParams.Add("masterid", Configuration.ApiClient.ParameterToString(masterid)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedContractMargins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContractMargin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ContractMargin>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContractMargin>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of ContractMargin type related to Contract entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Contract entity</param>
        /// <returns>Task of List&lt;ContractMargin&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContractMargin>> GetOwnedContractMarginsAsync (int? masterid)
        {
             ApiResponse<List<ContractMargin>> localVarResponse = await GetOwnedContractMarginsAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of ContractMargin type related to Contract entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Contract entity</param>
        /// <returns>Task of ApiResponse (List&lt;ContractMargin&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ContractMargin>>> GetOwnedContractMarginsAsyncWithHttpInfo (int? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling RisksApi->GetOwnedContractMargins");

            var localVarPath = "/contractMargin/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterid != null) localVarQueryParams.Add("masterid", Configuration.ApiClient.ParameterToString(masterid)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedContractMargins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContractMargin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ContractMargin>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContractMargin>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of ContractMargin type related to multiple entities of Contract type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Contract entities</param>
        /// <returns>List&lt;ContractMargin&gt;</returns>
        public List<ContractMargin> GetOwnedContractMarginsBatch (List<int?> masterids)
        {
             ApiResponse<List<ContractMargin>> localVarResponse = GetOwnedContractMarginsBatchWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of ContractMargin type related to multiple entities of Contract type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Contract entities</param>
        /// <returns>ApiResponse of List&lt;ContractMargin&gt;</returns>
        public ApiResponse< List<ContractMargin> > GetOwnedContractMarginsBatchWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling RisksApi->GetOwnedContractMarginsBatch");

            var localVarPath = "/contractMargin/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterids != null) localVarQueryParams.Add("masterids", Configuration.ApiClient.ParameterToString(masterids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedContractMarginsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContractMargin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ContractMargin>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContractMargin>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of ContractMargin type related to multiple entities of Contract type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Contract entities</param>
        /// <returns>Task of List&lt;ContractMargin&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContractMargin>> GetOwnedContractMarginsBatchAsync (List<int?> masterids)
        {
             ApiResponse<List<ContractMargin>> localVarResponse = await GetOwnedContractMarginsBatchAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of ContractMargin type related to multiple entities of Contract type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Contract entities</param>
        /// <returns>Task of ApiResponse (List&lt;ContractMargin&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ContractMargin>>> GetOwnedContractMarginsBatchAsyncWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling RisksApi->GetOwnedContractMarginsBatch");

            var localVarPath = "/contractMargin/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterids != null) localVarQueryParams.Add("masterids", Configuration.ApiClient.ParameterToString(masterids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedContractMarginsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContractMargin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ContractMargin>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContractMargin>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of ProductMargin type related to Product entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>List&lt;ProductMargin&gt;</returns>
        public List<ProductMargin> GetOwnedProductMargins (int? masterid)
        {
             ApiResponse<List<ProductMargin>> localVarResponse = GetOwnedProductMarginsWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of ProductMargin type related to Product entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>ApiResponse of List&lt;ProductMargin&gt;</returns>
        public ApiResponse< List<ProductMargin> > GetOwnedProductMarginsWithHttpInfo (int? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling RisksApi->GetOwnedProductMargins");

            var localVarPath = "/productMargin/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterid != null) localVarQueryParams.Add("masterid", Configuration.ApiClient.ParameterToString(masterid)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedProductMargins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductMargin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductMargin>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductMargin>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of ProductMargin type related to Product entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>Task of List&lt;ProductMargin&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductMargin>> GetOwnedProductMarginsAsync (int? masterid)
        {
             ApiResponse<List<ProductMargin>> localVarResponse = await GetOwnedProductMarginsAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of ProductMargin type related to Product entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Product entity</param>
        /// <returns>Task of ApiResponse (List&lt;ProductMargin&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductMargin>>> GetOwnedProductMarginsAsyncWithHttpInfo (int? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling RisksApi->GetOwnedProductMargins");

            var localVarPath = "/productMargin/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterid != null) localVarQueryParams.Add("masterid", Configuration.ApiClient.ParameterToString(masterid)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedProductMargins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductMargin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductMargin>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductMargin>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of ProductMargin type related to multiple entities of Product type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>List&lt;ProductMargin&gt;</returns>
        public List<ProductMargin> GetOwnedProductMarginsBatch (List<int?> masterids)
        {
             ApiResponse<List<ProductMargin>> localVarResponse = GetOwnedProductMarginsBatchWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of ProductMargin type related to multiple entities of Product type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>ApiResponse of List&lt;ProductMargin&gt;</returns>
        public ApiResponse< List<ProductMargin> > GetOwnedProductMarginsBatchWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling RisksApi->GetOwnedProductMarginsBatch");

            var localVarPath = "/productMargin/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterids != null) localVarQueryParams.Add("masterids", Configuration.ApiClient.ParameterToString(masterids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedProductMarginsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductMargin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductMargin>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductMargin>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of ProductMargin type related to multiple entities of Product type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>Task of List&lt;ProductMargin&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductMargin>> GetOwnedProductMarginsBatchAsync (List<int?> masterids)
        {
             ApiResponse<List<ProductMargin>> localVarResponse = await GetOwnedProductMarginsBatchAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of ProductMargin type related to multiple entities of Product type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Product entities</param>
        /// <returns>Task of ApiResponse (List&lt;ProductMargin&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductMargin>>> GetOwnedProductMarginsBatchAsyncWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling RisksApi->GetOwnedProductMarginsBatch");

            var localVarPath = "/productMargin/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterids != null) localVarQueryParams.Add("masterids", Configuration.ApiClient.ParameterToString(masterids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedProductMarginsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductMargin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductMargin>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductMargin>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of UserAccountAutoLiq type related to Account entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>List&lt;UserAccountAutoLiq&gt;</returns>
        public List<UserAccountAutoLiq> GetOwnedUserAccountAutoLiqs (int? masterid)
        {
             ApiResponse<List<UserAccountAutoLiq>> localVarResponse = GetOwnedUserAccountAutoLiqsWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of UserAccountAutoLiq type related to Account entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>ApiResponse of List&lt;UserAccountAutoLiq&gt;</returns>
        public ApiResponse< List<UserAccountAutoLiq> > GetOwnedUserAccountAutoLiqsWithHttpInfo (int? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling RisksApi->GetOwnedUserAccountAutoLiqs");

            var localVarPath = "/userAccountAutoLiq/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterid != null) localVarQueryParams.Add("masterid", Configuration.ApiClient.ParameterToString(masterid)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedUserAccountAutoLiqs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserAccountAutoLiq>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserAccountAutoLiq>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserAccountAutoLiq>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of UserAccountAutoLiq type related to Account entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>Task of List&lt;UserAccountAutoLiq&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserAccountAutoLiq>> GetOwnedUserAccountAutoLiqsAsync (int? masterid)
        {
             ApiResponse<List<UserAccountAutoLiq>> localVarResponse = await GetOwnedUserAccountAutoLiqsAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of UserAccountAutoLiq type related to Account entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>Task of ApiResponse (List&lt;UserAccountAutoLiq&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserAccountAutoLiq>>> GetOwnedUserAccountAutoLiqsAsyncWithHttpInfo (int? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling RisksApi->GetOwnedUserAccountAutoLiqs");

            var localVarPath = "/userAccountAutoLiq/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterid != null) localVarQueryParams.Add("masterid", Configuration.ApiClient.ParameterToString(masterid)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedUserAccountAutoLiqs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserAccountAutoLiq>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserAccountAutoLiq>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserAccountAutoLiq>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of UserAccountAutoLiq type related to multiple entities of Account type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>List&lt;UserAccountAutoLiq&gt;</returns>
        public List<UserAccountAutoLiq> GetOwnedUserAccountAutoLiqsBatch (List<int?> masterids)
        {
             ApiResponse<List<UserAccountAutoLiq>> localVarResponse = GetOwnedUserAccountAutoLiqsBatchWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of UserAccountAutoLiq type related to multiple entities of Account type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>ApiResponse of List&lt;UserAccountAutoLiq&gt;</returns>
        public ApiResponse< List<UserAccountAutoLiq> > GetOwnedUserAccountAutoLiqsBatchWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling RisksApi->GetOwnedUserAccountAutoLiqsBatch");

            var localVarPath = "/userAccountAutoLiq/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterids != null) localVarQueryParams.Add("masterids", Configuration.ApiClient.ParameterToString(masterids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedUserAccountAutoLiqsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserAccountAutoLiq>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserAccountAutoLiq>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserAccountAutoLiq>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of UserAccountAutoLiq type related to multiple entities of Account type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>Task of List&lt;UserAccountAutoLiq&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserAccountAutoLiq>> GetOwnedUserAccountAutoLiqsBatchAsync (List<int?> masterids)
        {
             ApiResponse<List<UserAccountAutoLiq>> localVarResponse = await GetOwnedUserAccountAutoLiqsBatchAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of UserAccountAutoLiq type related to multiple entities of Account type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>Task of ApiResponse (List&lt;UserAccountAutoLiq&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserAccountAutoLiq>>> GetOwnedUserAccountAutoLiqsBatchAsyncWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling RisksApi->GetOwnedUserAccountAutoLiqsBatch");

            var localVarPath = "/userAccountAutoLiq/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterids != null) localVarQueryParams.Add("masterids", Configuration.ApiClient.ParameterToString(masterids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedUserAccountAutoLiqsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserAccountAutoLiq>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserAccountAutoLiq>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserAccountAutoLiq>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of UserAccountPositionLimit type related to Account entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>List&lt;UserAccountPositionLimit&gt;</returns>
        public List<UserAccountPositionLimit> GetOwnedUserAccountPositionLimits (int? masterid)
        {
             ApiResponse<List<UserAccountPositionLimit>> localVarResponse = GetOwnedUserAccountPositionLimitsWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of UserAccountPositionLimit type related to Account entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>ApiResponse of List&lt;UserAccountPositionLimit&gt;</returns>
        public ApiResponse< List<UserAccountPositionLimit> > GetOwnedUserAccountPositionLimitsWithHttpInfo (int? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling RisksApi->GetOwnedUserAccountPositionLimits");

            var localVarPath = "/userAccountPositionLimit/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterid != null) localVarQueryParams.Add("masterid", Configuration.ApiClient.ParameterToString(masterid)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedUserAccountPositionLimits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserAccountPositionLimit>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserAccountPositionLimit>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserAccountPositionLimit>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of UserAccountPositionLimit type related to Account entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>Task of List&lt;UserAccountPositionLimit&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserAccountPositionLimit>> GetOwnedUserAccountPositionLimitsAsync (int? masterid)
        {
             ApiResponse<List<UserAccountPositionLimit>> localVarResponse = await GetOwnedUserAccountPositionLimitsAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of UserAccountPositionLimit type related to Account entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>Task of ApiResponse (List&lt;UserAccountPositionLimit&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserAccountPositionLimit>>> GetOwnedUserAccountPositionLimitsAsyncWithHttpInfo (int? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling RisksApi->GetOwnedUserAccountPositionLimits");

            var localVarPath = "/userAccountPositionLimit/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterid != null) localVarQueryParams.Add("masterid", Configuration.ApiClient.ParameterToString(masterid)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedUserAccountPositionLimits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserAccountPositionLimit>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserAccountPositionLimit>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserAccountPositionLimit>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of UserAccountPositionLimit type related to multiple entities of Account type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>List&lt;UserAccountPositionLimit&gt;</returns>
        public List<UserAccountPositionLimit> GetOwnedUserAccountPositionLimitsBatch (List<int?> masterids)
        {
             ApiResponse<List<UserAccountPositionLimit>> localVarResponse = GetOwnedUserAccountPositionLimitsBatchWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of UserAccountPositionLimit type related to multiple entities of Account type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>ApiResponse of List&lt;UserAccountPositionLimit&gt;</returns>
        public ApiResponse< List<UserAccountPositionLimit> > GetOwnedUserAccountPositionLimitsBatchWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling RisksApi->GetOwnedUserAccountPositionLimitsBatch");

            var localVarPath = "/userAccountPositionLimit/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterids != null) localVarQueryParams.Add("masterids", Configuration.ApiClient.ParameterToString(masterids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedUserAccountPositionLimitsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserAccountPositionLimit>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserAccountPositionLimit>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserAccountPositionLimit>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of UserAccountPositionLimit type related to multiple entities of Account type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>Task of List&lt;UserAccountPositionLimit&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserAccountPositionLimit>> GetOwnedUserAccountPositionLimitsBatchAsync (List<int?> masterids)
        {
             ApiResponse<List<UserAccountPositionLimit>> localVarResponse = await GetOwnedUserAccountPositionLimitsBatchAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of UserAccountPositionLimit type related to multiple entities of Account type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>Task of ApiResponse (List&lt;UserAccountPositionLimit&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserAccountPositionLimit>>> GetOwnedUserAccountPositionLimitsBatchAsyncWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling RisksApi->GetOwnedUserAccountPositionLimitsBatch");

            var localVarPath = "/userAccountPositionLimit/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterids != null) localVarQueryParams.Add("masterids", Configuration.ApiClient.ParameterToString(masterids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedUserAccountPositionLimitsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserAccountPositionLimit>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserAccountPositionLimit>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserAccountPositionLimit>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of UserAccountRiskParameter type related to UserAccountPositionLimit entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of UserAccountPositionLimit entity</param>
        /// <returns>List&lt;UserAccountRiskParameter&gt;</returns>
        public List<UserAccountRiskParameter> GetOwnedUserAccountRiskParameters (int? masterid)
        {
             ApiResponse<List<UserAccountRiskParameter>> localVarResponse = GetOwnedUserAccountRiskParametersWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of UserAccountRiskParameter type related to UserAccountPositionLimit entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of UserAccountPositionLimit entity</param>
        /// <returns>ApiResponse of List&lt;UserAccountRiskParameter&gt;</returns>
        public ApiResponse< List<UserAccountRiskParameter> > GetOwnedUserAccountRiskParametersWithHttpInfo (int? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling RisksApi->GetOwnedUserAccountRiskParameters");

            var localVarPath = "/userAccountRiskParameter/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterid != null) localVarQueryParams.Add("masterid", Configuration.ApiClient.ParameterToString(masterid)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedUserAccountRiskParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserAccountRiskParameter>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserAccountRiskParameter>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserAccountRiskParameter>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of UserAccountRiskParameter type related to UserAccountPositionLimit entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of UserAccountPositionLimit entity</param>
        /// <returns>Task of List&lt;UserAccountRiskParameter&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserAccountRiskParameter>> GetOwnedUserAccountRiskParametersAsync (int? masterid)
        {
             ApiResponse<List<UserAccountRiskParameter>> localVarResponse = await GetOwnedUserAccountRiskParametersAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of UserAccountRiskParameter type related to UserAccountPositionLimit entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of UserAccountPositionLimit entity</param>
        /// <returns>Task of ApiResponse (List&lt;UserAccountRiskParameter&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserAccountRiskParameter>>> GetOwnedUserAccountRiskParametersAsyncWithHttpInfo (int? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling RisksApi->GetOwnedUserAccountRiskParameters");

            var localVarPath = "/userAccountRiskParameter/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterid != null) localVarQueryParams.Add("masterid", Configuration.ApiClient.ParameterToString(masterid)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedUserAccountRiskParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserAccountRiskParameter>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserAccountRiskParameter>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserAccountRiskParameter>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of UserAccountRiskParameter type related to multiple entities of UserAccountPositionLimit type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of UserAccountPositionLimit entities</param>
        /// <returns>List&lt;UserAccountRiskParameter&gt;</returns>
        public List<UserAccountRiskParameter> GetOwnedUserAccountRiskParametersBatch (List<int?> masterids)
        {
             ApiResponse<List<UserAccountRiskParameter>> localVarResponse = GetOwnedUserAccountRiskParametersBatchWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of UserAccountRiskParameter type related to multiple entities of UserAccountPositionLimit type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of UserAccountPositionLimit entities</param>
        /// <returns>ApiResponse of List&lt;UserAccountRiskParameter&gt;</returns>
        public ApiResponse< List<UserAccountRiskParameter> > GetOwnedUserAccountRiskParametersBatchWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling RisksApi->GetOwnedUserAccountRiskParametersBatch");

            var localVarPath = "/userAccountRiskParameter/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterids != null) localVarQueryParams.Add("masterids", Configuration.ApiClient.ParameterToString(masterids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedUserAccountRiskParametersBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserAccountRiskParameter>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserAccountRiskParameter>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserAccountRiskParameter>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of UserAccountRiskParameter type related to multiple entities of UserAccountPositionLimit type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of UserAccountPositionLimit entities</param>
        /// <returns>Task of List&lt;UserAccountRiskParameter&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserAccountRiskParameter>> GetOwnedUserAccountRiskParametersBatchAsync (List<int?> masterids)
        {
             ApiResponse<List<UserAccountRiskParameter>> localVarResponse = await GetOwnedUserAccountRiskParametersBatchAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of UserAccountRiskParameter type related to multiple entities of UserAccountPositionLimit type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of UserAccountPositionLimit entities</param>
        /// <returns>Task of ApiResponse (List&lt;UserAccountRiskParameter&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserAccountRiskParameter>>> GetOwnedUserAccountRiskParametersBatchAsyncWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling RisksApi->GetOwnedUserAccountRiskParametersBatch");

            var localVarPath = "/userAccountRiskParameter/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterids != null) localVarQueryParams.Add("masterids", Configuration.ApiClient.ParameterToString(masterids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedUserAccountRiskParametersBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserAccountRiskParameter>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserAccountRiskParameter>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserAccountRiskParameter>)));
            
        }

        /// <summary>
        ///  Retrieves an entity of ProductMargin type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ProductMargin</returns>
        public ProductMargin GetProductMargin (int? id)
        {
             ApiResponse<ProductMargin> localVarResponse = GetProductMarginWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of ProductMargin type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ProductMargin</returns>
        public ApiResponse< ProductMargin > GetProductMarginWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RisksApi->GetProductMargin");

            var localVarPath = "/productMargin/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductMargin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductMargin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductMargin) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductMargin)));
            
        }

        /// <summary>
        ///  Retrieves an entity of ProductMargin type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ProductMargin</returns>
        public async System.Threading.Tasks.Task<ProductMargin> GetProductMarginAsync (int? id)
        {
             ApiResponse<ProductMargin> localVarResponse = await GetProductMarginAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of ProductMargin type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ProductMargin)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductMargin>> GetProductMarginAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RisksApi->GetProductMargin");

            var localVarPath = "/productMargin/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductMargin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductMargin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductMargin) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductMargin)));
            
        }

        /// <summary>
        ///  Retrieves multiple entities of ProductMargin type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;ProductMargin&gt;</returns>
        public List<ProductMargin> GetProductMargins (List<int?> ids)
        {
             ApiResponse<List<ProductMargin>> localVarResponse = GetProductMarginsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of ProductMargin type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;ProductMargin&gt;</returns>
        public ApiResponse< List<ProductMargin> > GetProductMarginsWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RisksApi->GetProductMargins");

            var localVarPath = "/productMargin/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductMargins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductMargin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductMargin>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductMargin>)));
            
        }

        /// <summary>
        ///  Retrieves multiple entities of ProductMargin type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;ProductMargin&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductMargin>> GetProductMarginsAsync (List<int?> ids)
        {
             ApiResponse<List<ProductMargin>> localVarResponse = await GetProductMarginsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of ProductMargin type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;ProductMargin&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductMargin>>> GetProductMarginsAsyncWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RisksApi->GetProductMargins");

            var localVarPath = "/productMargin/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductMargins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductMargin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductMargin>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductMargin>)));
            
        }

        /// <summary>
        ///  Retrieves an entity of UserAccountAutoLiq type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserAccountAutoLiq</returns>
        public UserAccountAutoLiq GetUserAccountAutoLiq (int? id)
        {
             ApiResponse<UserAccountAutoLiq> localVarResponse = GetUserAccountAutoLiqWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of UserAccountAutoLiq type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserAccountAutoLiq</returns>
        public ApiResponse< UserAccountAutoLiq > GetUserAccountAutoLiqWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RisksApi->GetUserAccountAutoLiq");

            var localVarPath = "/userAccountAutoLiq/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserAccountAutoLiq", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAccountAutoLiq>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserAccountAutoLiq) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAccountAutoLiq)));
            
        }

        /// <summary>
        ///  Retrieves an entity of UserAccountAutoLiq type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserAccountAutoLiq</returns>
        public async System.Threading.Tasks.Task<UserAccountAutoLiq> GetUserAccountAutoLiqAsync (int? id)
        {
             ApiResponse<UserAccountAutoLiq> localVarResponse = await GetUserAccountAutoLiqAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of UserAccountAutoLiq type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserAccountAutoLiq)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAccountAutoLiq>> GetUserAccountAutoLiqAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RisksApi->GetUserAccountAutoLiq");

            var localVarPath = "/userAccountAutoLiq/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserAccountAutoLiq", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAccountAutoLiq>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserAccountAutoLiq) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAccountAutoLiq)));
            
        }

        /// <summary>
        ///  Retrieves multiple entities of UserAccountAutoLiq type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;UserAccountAutoLiq&gt;</returns>
        public List<UserAccountAutoLiq> GetUserAccountAutoLiqs (List<int?> ids)
        {
             ApiResponse<List<UserAccountAutoLiq>> localVarResponse = GetUserAccountAutoLiqsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of UserAccountAutoLiq type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;UserAccountAutoLiq&gt;</returns>
        public ApiResponse< List<UserAccountAutoLiq> > GetUserAccountAutoLiqsWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RisksApi->GetUserAccountAutoLiqs");

            var localVarPath = "/userAccountAutoLiq/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserAccountAutoLiqs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserAccountAutoLiq>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserAccountAutoLiq>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserAccountAutoLiq>)));
            
        }

        /// <summary>
        ///  Retrieves multiple entities of UserAccountAutoLiq type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;UserAccountAutoLiq&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserAccountAutoLiq>> GetUserAccountAutoLiqsAsync (List<int?> ids)
        {
             ApiResponse<List<UserAccountAutoLiq>> localVarResponse = await GetUserAccountAutoLiqsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of UserAccountAutoLiq type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;UserAccountAutoLiq&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserAccountAutoLiq>>> GetUserAccountAutoLiqsAsyncWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RisksApi->GetUserAccountAutoLiqs");

            var localVarPath = "/userAccountAutoLiq/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserAccountAutoLiqs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserAccountAutoLiq>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserAccountAutoLiq>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserAccountAutoLiq>)));
            
        }

        /// <summary>
        ///  Retrieves an entity of UserAccountPositionLimit type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserAccountPositionLimit</returns>
        public UserAccountPositionLimit GetUserAccountPositionLimit (int? id)
        {
             ApiResponse<UserAccountPositionLimit> localVarResponse = GetUserAccountPositionLimitWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of UserAccountPositionLimit type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserAccountPositionLimit</returns>
        public ApiResponse< UserAccountPositionLimit > GetUserAccountPositionLimitWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RisksApi->GetUserAccountPositionLimit");

            var localVarPath = "/userAccountPositionLimit/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserAccountPositionLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAccountPositionLimit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserAccountPositionLimit) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAccountPositionLimit)));
            
        }

        /// <summary>
        ///  Retrieves an entity of UserAccountPositionLimit type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserAccountPositionLimit</returns>
        public async System.Threading.Tasks.Task<UserAccountPositionLimit> GetUserAccountPositionLimitAsync (int? id)
        {
             ApiResponse<UserAccountPositionLimit> localVarResponse = await GetUserAccountPositionLimitAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of UserAccountPositionLimit type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserAccountPositionLimit)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAccountPositionLimit>> GetUserAccountPositionLimitAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RisksApi->GetUserAccountPositionLimit");

            var localVarPath = "/userAccountPositionLimit/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserAccountPositionLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAccountPositionLimit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserAccountPositionLimit) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAccountPositionLimit)));
            
        }

        /// <summary>
        ///  Retrieves multiple entities of UserAccountPositionLimit type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;UserAccountPositionLimit&gt;</returns>
        public List<UserAccountPositionLimit> GetUserAccountPositionLimits (List<int?> ids)
        {
             ApiResponse<List<UserAccountPositionLimit>> localVarResponse = GetUserAccountPositionLimitsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of UserAccountPositionLimit type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;UserAccountPositionLimit&gt;</returns>
        public ApiResponse< List<UserAccountPositionLimit> > GetUserAccountPositionLimitsWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RisksApi->GetUserAccountPositionLimits");

            var localVarPath = "/userAccountPositionLimit/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserAccountPositionLimits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserAccountPositionLimit>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserAccountPositionLimit>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserAccountPositionLimit>)));
            
        }

        /// <summary>
        ///  Retrieves multiple entities of UserAccountPositionLimit type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;UserAccountPositionLimit&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserAccountPositionLimit>> GetUserAccountPositionLimitsAsync (List<int?> ids)
        {
             ApiResponse<List<UserAccountPositionLimit>> localVarResponse = await GetUserAccountPositionLimitsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of UserAccountPositionLimit type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;UserAccountPositionLimit&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserAccountPositionLimit>>> GetUserAccountPositionLimitsAsyncWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RisksApi->GetUserAccountPositionLimits");

            var localVarPath = "/userAccountPositionLimit/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserAccountPositionLimits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserAccountPositionLimit>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserAccountPositionLimit>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserAccountPositionLimit>)));
            
        }

        /// <summary>
        ///  Retrieves an entity of UserAccountRiskParameter type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserAccountRiskParameter</returns>
        public UserAccountRiskParameter GetUserAccountRiskParameter (int? id)
        {
             ApiResponse<UserAccountRiskParameter> localVarResponse = GetUserAccountRiskParameterWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of UserAccountRiskParameter type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserAccountRiskParameter</returns>
        public ApiResponse< UserAccountRiskParameter > GetUserAccountRiskParameterWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RisksApi->GetUserAccountRiskParameter");

            var localVarPath = "/userAccountRiskParameter/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserAccountRiskParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAccountRiskParameter>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserAccountRiskParameter) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAccountRiskParameter)));
            
        }

        /// <summary>
        ///  Retrieves an entity of UserAccountRiskParameter type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserAccountRiskParameter</returns>
        public async System.Threading.Tasks.Task<UserAccountRiskParameter> GetUserAccountRiskParameterAsync (int? id)
        {
             ApiResponse<UserAccountRiskParameter> localVarResponse = await GetUserAccountRiskParameterAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of UserAccountRiskParameter type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserAccountRiskParameter)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAccountRiskParameter>> GetUserAccountRiskParameterAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RisksApi->GetUserAccountRiskParameter");

            var localVarPath = "/userAccountRiskParameter/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserAccountRiskParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAccountRiskParameter>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserAccountRiskParameter) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAccountRiskParameter)));
            
        }

        /// <summary>
        ///  Retrieves multiple entities of UserAccountRiskParameter type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;UserAccountRiskParameter&gt;</returns>
        public List<UserAccountRiskParameter> GetUserAccountRiskParameters (List<int?> ids)
        {
             ApiResponse<List<UserAccountRiskParameter>> localVarResponse = GetUserAccountRiskParametersWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of UserAccountRiskParameter type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;UserAccountRiskParameter&gt;</returns>
        public ApiResponse< List<UserAccountRiskParameter> > GetUserAccountRiskParametersWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RisksApi->GetUserAccountRiskParameters");

            var localVarPath = "/userAccountRiskParameter/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserAccountRiskParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserAccountRiskParameter>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserAccountRiskParameter>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserAccountRiskParameter>)));
            
        }

        /// <summary>
        ///  Retrieves multiple entities of UserAccountRiskParameter type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;UserAccountRiskParameter&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserAccountRiskParameter>> GetUserAccountRiskParametersAsync (List<int?> ids)
        {
             ApiResponse<List<UserAccountRiskParameter>> localVarResponse = await GetUserAccountRiskParametersAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of UserAccountRiskParameter type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;UserAccountRiskParameter&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserAccountRiskParameter>>> GetUserAccountRiskParametersAsyncWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RisksApi->GetUserAccountRiskParameters");

            var localVarPath = "/userAccountRiskParameter/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserAccountRiskParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserAccountRiskParameter>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserAccountRiskParameter>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserAccountRiskParameter>)));
            
        }

        /// <summary>
        ///  Updates an existing entity of UserAccountAutoLiq
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UserAccountAutoLiq</returns>
        public UserAccountAutoLiq UpdateUserAccountAutoLiq (UserAccountAutoLiq body)
        {
             ApiResponse<UserAccountAutoLiq> localVarResponse = UpdateUserAccountAutoLiqWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing entity of UserAccountAutoLiq
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserAccountAutoLiq</returns>
        public ApiResponse< UserAccountAutoLiq > UpdateUserAccountAutoLiqWithHttpInfo (UserAccountAutoLiq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RisksApi->UpdateUserAccountAutoLiq");

            var localVarPath = "/userAccountAutoLiq/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserAccountAutoLiq", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAccountAutoLiq>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserAccountAutoLiq) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAccountAutoLiq)));
            
        }

        /// <summary>
        ///  Updates an existing entity of UserAccountAutoLiq
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UserAccountAutoLiq</returns>
        public async System.Threading.Tasks.Task<UserAccountAutoLiq> UpdateUserAccountAutoLiqAsync (UserAccountAutoLiq body)
        {
             ApiResponse<UserAccountAutoLiq> localVarResponse = await UpdateUserAccountAutoLiqAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates an existing entity of UserAccountAutoLiq
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserAccountAutoLiq)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAccountAutoLiq>> UpdateUserAccountAutoLiqAsyncWithHttpInfo (UserAccountAutoLiq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RisksApi->UpdateUserAccountAutoLiq");

            var localVarPath = "/userAccountAutoLiq/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserAccountAutoLiq", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAccountAutoLiq>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserAccountAutoLiq) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAccountAutoLiq)));
            
        }

        /// <summary>
        ///  Updates an existing entity of UserAccountPositionLimit
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UserAccountPositionLimit</returns>
        public UserAccountPositionLimit UpdateUserAccountPositionLimit (UserAccountPositionLimit body)
        {
             ApiResponse<UserAccountPositionLimit> localVarResponse = UpdateUserAccountPositionLimitWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing entity of UserAccountPositionLimit
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserAccountPositionLimit</returns>
        public ApiResponse< UserAccountPositionLimit > UpdateUserAccountPositionLimitWithHttpInfo (UserAccountPositionLimit body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RisksApi->UpdateUserAccountPositionLimit");

            var localVarPath = "/userAccountPositionLimit/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserAccountPositionLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAccountPositionLimit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserAccountPositionLimit) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAccountPositionLimit)));
            
        }

        /// <summary>
        ///  Updates an existing entity of UserAccountPositionLimit
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UserAccountPositionLimit</returns>
        public async System.Threading.Tasks.Task<UserAccountPositionLimit> UpdateUserAccountPositionLimitAsync (UserAccountPositionLimit body)
        {
             ApiResponse<UserAccountPositionLimit> localVarResponse = await UpdateUserAccountPositionLimitAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates an existing entity of UserAccountPositionLimit
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserAccountPositionLimit)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAccountPositionLimit>> UpdateUserAccountPositionLimitAsyncWithHttpInfo (UserAccountPositionLimit body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RisksApi->UpdateUserAccountPositionLimit");

            var localVarPath = "/userAccountPositionLimit/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserAccountPositionLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAccountPositionLimit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserAccountPositionLimit) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAccountPositionLimit)));
            
        }

        /// <summary>
        ///  Updates an existing entity of UserAccountRiskParameter
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UserAccountRiskParameter</returns>
        public UserAccountRiskParameter UpdateUserAccountRiskParameter (UserAccountRiskParameter body)
        {
             ApiResponse<UserAccountRiskParameter> localVarResponse = UpdateUserAccountRiskParameterWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing entity of UserAccountRiskParameter
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserAccountRiskParameter</returns>
        public ApiResponse< UserAccountRiskParameter > UpdateUserAccountRiskParameterWithHttpInfo (UserAccountRiskParameter body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RisksApi->UpdateUserAccountRiskParameter");

            var localVarPath = "/userAccountRiskParameter/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserAccountRiskParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAccountRiskParameter>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserAccountRiskParameter) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAccountRiskParameter)));
            
        }

        /// <summary>
        ///  Updates an existing entity of UserAccountRiskParameter
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UserAccountRiskParameter</returns>
        public async System.Threading.Tasks.Task<UserAccountRiskParameter> UpdateUserAccountRiskParameterAsync (UserAccountRiskParameter body)
        {
             ApiResponse<UserAccountRiskParameter> localVarResponse = await UpdateUserAccountRiskParameterAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates an existing entity of UserAccountRiskParameter
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserAccountRiskParameter)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAccountRiskParameter>> UpdateUserAccountRiskParameterAsyncWithHttpInfo (UserAccountRiskParameter body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RisksApi->UpdateUserAccountRiskParameter");

            var localVarPath = "/userAccountRiskParameter/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserAccountRiskParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAccountRiskParameter>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserAccountRiskParameter) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAccountRiskParameter)));
            
        }

    }
}
