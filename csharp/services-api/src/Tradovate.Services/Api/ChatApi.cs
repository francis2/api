/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tradovate.Services.Client;
using Tradovate.Services.Model;

namespace Tradovate.Services.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChatApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ChatResponse</returns>
        ChatResponse CloseChat (CloseChat body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ChatResponse</returns>
        ApiResponse<ChatResponse> CloseChatWithHttpInfo (CloseChat body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Chat type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Chat&gt;</returns>
        List<Chat> GetAllChats ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Chat type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Chat&gt;</returns>
        ApiResponse<List<Chat>> GetAllChatsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Chat type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Chat</returns>
        Chat GetChat (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Chat type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Chat</returns>
        ApiResponse<Chat> GetChatWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ChatMessage type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChatMessage</returns>
        ChatMessage GetChatMessage (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ChatMessage type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChatMessage</returns>
        ApiResponse<ChatMessage> GetChatMessageWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ChatMessage type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;ChatMessage&gt;</returns>
        List<ChatMessage> GetChatMessages (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ChatMessage type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;ChatMessage&gt;</returns>
        ApiResponse<List<ChatMessage>> GetChatMessagesWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Chat type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;Chat&gt;</returns>
        List<Chat> GetChats (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Chat type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;Chat&gt;</returns>
        ApiResponse<List<Chat>> GetChatsWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ChatMessage type related to Chat entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Chat entity</param>
        /// <returns>List&lt;ChatMessage&gt;</returns>
        List<ChatMessage> GetOwnedChatMessages (int? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ChatMessage type related to Chat entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Chat entity</param>
        /// <returns>ApiResponse of List&lt;ChatMessage&gt;</returns>
        ApiResponse<List<ChatMessage>> GetOwnedChatMessagesWithHttpInfo (int? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ChatMessage type related to multiple entities of Chat type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Chat entities</param>
        /// <returns>List&lt;ChatMessage&gt;</returns>
        List<ChatMessage> GetOwnedChatMessagesBatch (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ChatMessage type related to multiple entities of Chat type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Chat entities</param>
        /// <returns>ApiResponse of List&lt;ChatMessage&gt;</returns>
        ApiResponse<List<ChatMessage>> GetOwnedChatMessagesBatchWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Chat type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>List&lt;Chat&gt;</returns>
        List<Chat> GetOwnedChats (int? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Chat type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>ApiResponse of List&lt;Chat&gt;</returns>
        ApiResponse<List<Chat>> GetOwnedChatsWithHttpInfo (int? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Chat type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>List&lt;Chat&gt;</returns>
        List<Chat> GetOwnedChatsBatch (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Chat type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>ApiResponse of List&lt;Chat&gt;</returns>
        ApiResponse<List<Chat>> GetOwnedChatsBatchWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ChatMessageResponse</returns>
        ChatMessageResponse MarkAsReadChatMessage (MarkAsReadChatMessage body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ChatMessageResponse</returns>
        ApiResponse<ChatMessageResponse> MarkAsReadChatMessageWithHttpInfo (MarkAsReadChatMessage body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ChatMessageResponse</returns>
        ChatMessageResponse PostChatMessage (PostChatMessage body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ChatMessageResponse</returns>
        ApiResponse<ChatMessageResponse> PostChatMessageWithHttpInfo (PostChatMessage body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ChatResponse</returns>
        System.Threading.Tasks.Task<ChatResponse> CloseChatAsync (CloseChat body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ChatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChatResponse>> CloseChatAsyncWithHttpInfo (CloseChat body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Chat type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Chat&gt;</returns>
        System.Threading.Tasks.Task<List<Chat>> GetAllChatsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Chat type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Chat&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Chat>>> GetAllChatsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Chat type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Chat</returns>
        System.Threading.Tasks.Task<Chat> GetChatAsync (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Chat type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Chat)</returns>
        System.Threading.Tasks.Task<ApiResponse<Chat>> GetChatAsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ChatMessage type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChatMessage</returns>
        System.Threading.Tasks.Task<ChatMessage> GetChatMessageAsync (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of ChatMessage type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChatMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChatMessage>> GetChatMessageAsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ChatMessage type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;ChatMessage&gt;</returns>
        System.Threading.Tasks.Task<List<ChatMessage>> GetChatMessagesAsync (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of ChatMessage type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;ChatMessage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChatMessage>>> GetChatMessagesAsyncWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Chat type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;Chat&gt;</returns>
        System.Threading.Tasks.Task<List<Chat>> GetChatsAsync (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Chat type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;Chat&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Chat>>> GetChatsAsyncWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ChatMessage type related to Chat entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Chat entity</param>
        /// <returns>Task of List&lt;ChatMessage&gt;</returns>
        System.Threading.Tasks.Task<List<ChatMessage>> GetOwnedChatMessagesAsync (int? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ChatMessage type related to Chat entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Chat entity</param>
        /// <returns>Task of ApiResponse (List&lt;ChatMessage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChatMessage>>> GetOwnedChatMessagesAsyncWithHttpInfo (int? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ChatMessage type related to multiple entities of Chat type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Chat entities</param>
        /// <returns>Task of List&lt;ChatMessage&gt;</returns>
        System.Threading.Tasks.Task<List<ChatMessage>> GetOwnedChatMessagesBatchAsync (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of ChatMessage type related to multiple entities of Chat type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Chat entities</param>
        /// <returns>Task of ApiResponse (List&lt;ChatMessage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChatMessage>>> GetOwnedChatMessagesBatchAsyncWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Chat type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of List&lt;Chat&gt;</returns>
        System.Threading.Tasks.Task<List<Chat>> GetOwnedChatsAsync (int? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Chat type related to User entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of ApiResponse (List&lt;Chat&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Chat>>> GetOwnedChatsAsyncWithHttpInfo (int? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Chat type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of List&lt;Chat&gt;</returns>
        System.Threading.Tasks.Task<List<Chat>> GetOwnedChatsBatchAsync (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Chat type related to multiple entities of User type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of ApiResponse (List&lt;Chat&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Chat>>> GetOwnedChatsBatchAsyncWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ChatMessageResponse</returns>
        System.Threading.Tasks.Task<ChatMessageResponse> MarkAsReadChatMessageAsync (MarkAsReadChatMessage body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ChatMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChatMessageResponse>> MarkAsReadChatMessageAsyncWithHttpInfo (MarkAsReadChatMessage body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ChatMessageResponse</returns>
        System.Threading.Tasks.Task<ChatMessageResponse> PostChatMessageAsync (PostChatMessage body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ChatMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChatMessageResponse>> PostChatMessageAsyncWithHttpInfo (PostChatMessage body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChatApi : IChatApi
    {
        private Tradovate.Services.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChatApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChatApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Tradovate.Services.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChatApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChatApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tradovate.Services.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tradovate.Services.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ChatResponse</returns>
        public ChatResponse CloseChat (CloseChat body)
        {
             ApiResponse<ChatResponse> localVarResponse = CloseChatWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ChatResponse</returns>
        public ApiResponse< ChatResponse > CloseChatWithHttpInfo (CloseChat body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ChatApi->CloseChat");

            var localVarPath = "/chat/closechat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChatResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChatResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ChatResponse</returns>
        public async System.Threading.Tasks.Task<ChatResponse> CloseChatAsync (CloseChat body)
        {
             ApiResponse<ChatResponse> localVarResponse = await CloseChatAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ChatResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChatResponse>> CloseChatAsyncWithHttpInfo (CloseChat body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ChatApi->CloseChat");

            var localVarPath = "/chat/closechat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChatResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChatResponse)));
            
        }

        /// <summary>
        ///  Retrieves all entities of Chat type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Chat&gt;</returns>
        public List<Chat> GetAllChats ()
        {
             ApiResponse<List<Chat>> localVarResponse = GetAllChatsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of Chat type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Chat&gt;</returns>
        public ApiResponse< List<Chat> > GetAllChatsWithHttpInfo ()
        {

            var localVarPath = "/chat/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Chat>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Chat>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Chat>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of Chat type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Chat&gt;</returns>
        public async System.Threading.Tasks.Task<List<Chat>> GetAllChatsAsync ()
        {
             ApiResponse<List<Chat>> localVarResponse = await GetAllChatsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of Chat type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Chat&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Chat>>> GetAllChatsAsyncWithHttpInfo ()
        {

            var localVarPath = "/chat/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Chat>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Chat>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Chat>)));
            
        }

        /// <summary>
        ///  Retrieves an entity of Chat type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Chat</returns>
        public Chat GetChat (int? id)
        {
             ApiResponse<Chat> localVarResponse = GetChatWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of Chat type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Chat</returns>
        public ApiResponse< Chat > GetChatWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ChatApi->GetChat");

            var localVarPath = "/chat/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Chat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Chat) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Chat)));
            
        }

        /// <summary>
        ///  Retrieves an entity of Chat type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Chat</returns>
        public async System.Threading.Tasks.Task<Chat> GetChatAsync (int? id)
        {
             ApiResponse<Chat> localVarResponse = await GetChatAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of Chat type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Chat)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Chat>> GetChatAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ChatApi->GetChat");

            var localVarPath = "/chat/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Chat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Chat) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Chat)));
            
        }

        /// <summary>
        ///  Retrieves an entity of ChatMessage type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChatMessage</returns>
        public ChatMessage GetChatMessage (int? id)
        {
             ApiResponse<ChatMessage> localVarResponse = GetChatMessageWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of ChatMessage type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChatMessage</returns>
        public ApiResponse< ChatMessage > GetChatMessageWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ChatApi->GetChatMessage");

            var localVarPath = "/chatMessage/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChatMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChatMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChatMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChatMessage)));
            
        }

        /// <summary>
        ///  Retrieves an entity of ChatMessage type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChatMessage</returns>
        public async System.Threading.Tasks.Task<ChatMessage> GetChatMessageAsync (int? id)
        {
             ApiResponse<ChatMessage> localVarResponse = await GetChatMessageAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of ChatMessage type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChatMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChatMessage>> GetChatMessageAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ChatApi->GetChatMessage");

            var localVarPath = "/chatMessage/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChatMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChatMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChatMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChatMessage)));
            
        }

        /// <summary>
        ///  Retrieves multiple entities of ChatMessage type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;ChatMessage&gt;</returns>
        public List<ChatMessage> GetChatMessages (List<int?> ids)
        {
             ApiResponse<List<ChatMessage>> localVarResponse = GetChatMessagesWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of ChatMessage type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;ChatMessage&gt;</returns>
        public ApiResponse< List<ChatMessage> > GetChatMessagesWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ChatApi->GetChatMessages");

            var localVarPath = "/chatMessage/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChatMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChatMessage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChatMessage>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChatMessage>)));
            
        }

        /// <summary>
        ///  Retrieves multiple entities of ChatMessage type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;ChatMessage&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChatMessage>> GetChatMessagesAsync (List<int?> ids)
        {
             ApiResponse<List<ChatMessage>> localVarResponse = await GetChatMessagesAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of ChatMessage type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;ChatMessage&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ChatMessage>>> GetChatMessagesAsyncWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ChatApi->GetChatMessages");

            var localVarPath = "/chatMessage/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChatMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChatMessage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChatMessage>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChatMessage>)));
            
        }

        /// <summary>
        ///  Retrieves multiple entities of Chat type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;Chat&gt;</returns>
        public List<Chat> GetChats (List<int?> ids)
        {
             ApiResponse<List<Chat>> localVarResponse = GetChatsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of Chat type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;Chat&gt;</returns>
        public ApiResponse< List<Chat> > GetChatsWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ChatApi->GetChats");

            var localVarPath = "/chat/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Chat>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Chat>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Chat>)));
            
        }

        /// <summary>
        ///  Retrieves multiple entities of Chat type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;Chat&gt;</returns>
        public async System.Threading.Tasks.Task<List<Chat>> GetChatsAsync (List<int?> ids)
        {
             ApiResponse<List<Chat>> localVarResponse = await GetChatsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of Chat type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;Chat&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Chat>>> GetChatsAsyncWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ChatApi->GetChats");

            var localVarPath = "/chat/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Chat>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Chat>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Chat>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of ChatMessage type related to Chat entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Chat entity</param>
        /// <returns>List&lt;ChatMessage&gt;</returns>
        public List<ChatMessage> GetOwnedChatMessages (int? masterid)
        {
             ApiResponse<List<ChatMessage>> localVarResponse = GetOwnedChatMessagesWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of ChatMessage type related to Chat entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Chat entity</param>
        /// <returns>ApiResponse of List&lt;ChatMessage&gt;</returns>
        public ApiResponse< List<ChatMessage> > GetOwnedChatMessagesWithHttpInfo (int? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling ChatApi->GetOwnedChatMessages");

            var localVarPath = "/chatMessage/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterid != null) localVarQueryParams.Add("masterid", Configuration.ApiClient.ParameterToString(masterid)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedChatMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChatMessage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChatMessage>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChatMessage>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of ChatMessage type related to Chat entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Chat entity</param>
        /// <returns>Task of List&lt;ChatMessage&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChatMessage>> GetOwnedChatMessagesAsync (int? masterid)
        {
             ApiResponse<List<ChatMessage>> localVarResponse = await GetOwnedChatMessagesAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of ChatMessage type related to Chat entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Chat entity</param>
        /// <returns>Task of ApiResponse (List&lt;ChatMessage&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ChatMessage>>> GetOwnedChatMessagesAsyncWithHttpInfo (int? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling ChatApi->GetOwnedChatMessages");

            var localVarPath = "/chatMessage/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterid != null) localVarQueryParams.Add("masterid", Configuration.ApiClient.ParameterToString(masterid)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedChatMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChatMessage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChatMessage>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChatMessage>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of ChatMessage type related to multiple entities of Chat type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Chat entities</param>
        /// <returns>List&lt;ChatMessage&gt;</returns>
        public List<ChatMessage> GetOwnedChatMessagesBatch (List<int?> masterids)
        {
             ApiResponse<List<ChatMessage>> localVarResponse = GetOwnedChatMessagesBatchWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of ChatMessage type related to multiple entities of Chat type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Chat entities</param>
        /// <returns>ApiResponse of List&lt;ChatMessage&gt;</returns>
        public ApiResponse< List<ChatMessage> > GetOwnedChatMessagesBatchWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling ChatApi->GetOwnedChatMessagesBatch");

            var localVarPath = "/chatMessage/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterids != null) localVarQueryParams.Add("masterids", Configuration.ApiClient.ParameterToString(masterids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedChatMessagesBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChatMessage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChatMessage>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChatMessage>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of ChatMessage type related to multiple entities of Chat type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Chat entities</param>
        /// <returns>Task of List&lt;ChatMessage&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChatMessage>> GetOwnedChatMessagesBatchAsync (List<int?> masterids)
        {
             ApiResponse<List<ChatMessage>> localVarResponse = await GetOwnedChatMessagesBatchAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of ChatMessage type related to multiple entities of Chat type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Chat entities</param>
        /// <returns>Task of ApiResponse (List&lt;ChatMessage&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ChatMessage>>> GetOwnedChatMessagesBatchAsyncWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling ChatApi->GetOwnedChatMessagesBatch");

            var localVarPath = "/chatMessage/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterids != null) localVarQueryParams.Add("masterids", Configuration.ApiClient.ParameterToString(masterids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedChatMessagesBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChatMessage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChatMessage>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChatMessage>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of Chat type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>List&lt;Chat&gt;</returns>
        public List<Chat> GetOwnedChats (int? masterid)
        {
             ApiResponse<List<Chat>> localVarResponse = GetOwnedChatsWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of Chat type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>ApiResponse of List&lt;Chat&gt;</returns>
        public ApiResponse< List<Chat> > GetOwnedChatsWithHttpInfo (int? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling ChatApi->GetOwnedChats");

            var localVarPath = "/chat/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterid != null) localVarQueryParams.Add("masterid", Configuration.ApiClient.ParameterToString(masterid)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Chat>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Chat>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Chat>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of Chat type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of List&lt;Chat&gt;</returns>
        public async System.Threading.Tasks.Task<List<Chat>> GetOwnedChatsAsync (int? masterid)
        {
             ApiResponse<List<Chat>> localVarResponse = await GetOwnedChatsAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of Chat type related to User entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of User entity</param>
        /// <returns>Task of ApiResponse (List&lt;Chat&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Chat>>> GetOwnedChatsAsyncWithHttpInfo (int? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling ChatApi->GetOwnedChats");

            var localVarPath = "/chat/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterid != null) localVarQueryParams.Add("masterid", Configuration.ApiClient.ParameterToString(masterid)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Chat>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Chat>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Chat>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of Chat type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>List&lt;Chat&gt;</returns>
        public List<Chat> GetOwnedChatsBatch (List<int?> masterids)
        {
             ApiResponse<List<Chat>> localVarResponse = GetOwnedChatsBatchWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of Chat type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>ApiResponse of List&lt;Chat&gt;</returns>
        public ApiResponse< List<Chat> > GetOwnedChatsBatchWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling ChatApi->GetOwnedChatsBatch");

            var localVarPath = "/chat/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterids != null) localVarQueryParams.Add("masterids", Configuration.ApiClient.ParameterToString(masterids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedChatsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Chat>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Chat>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Chat>)));
            
        }

        /// <summary>
        ///  Retrieves all entities of Chat type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of List&lt;Chat&gt;</returns>
        public async System.Threading.Tasks.Task<List<Chat>> GetOwnedChatsBatchAsync (List<int?> masterids)
        {
             ApiResponse<List<Chat>> localVarResponse = await GetOwnedChatsBatchAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of Chat type related to multiple entities of User type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of User entities</param>
        /// <returns>Task of ApiResponse (List&lt;Chat&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Chat>>> GetOwnedChatsBatchAsyncWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling ChatApi->GetOwnedChatsBatch");

            var localVarPath = "/chat/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterids != null) localVarQueryParams.Add("masterids", Configuration.ApiClient.ParameterToString(masterids)); // query parameter

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedChatsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Chat>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Chat>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Chat>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ChatMessageResponse</returns>
        public ChatMessageResponse MarkAsReadChatMessage (MarkAsReadChatMessage body)
        {
             ApiResponse<ChatMessageResponse> localVarResponse = MarkAsReadChatMessageWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ChatMessageResponse</returns>
        public ApiResponse< ChatMessageResponse > MarkAsReadChatMessageWithHttpInfo (MarkAsReadChatMessage body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ChatApi->MarkAsReadChatMessage");

            var localVarPath = "/chat/markasreadchatmessage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkAsReadChatMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChatMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChatMessageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChatMessageResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ChatMessageResponse</returns>
        public async System.Threading.Tasks.Task<ChatMessageResponse> MarkAsReadChatMessageAsync (MarkAsReadChatMessage body)
        {
             ApiResponse<ChatMessageResponse> localVarResponse = await MarkAsReadChatMessageAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ChatMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChatMessageResponse>> MarkAsReadChatMessageAsyncWithHttpInfo (MarkAsReadChatMessage body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ChatApi->MarkAsReadChatMessage");

            var localVarPath = "/chat/markasreadchatmessage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkAsReadChatMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChatMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChatMessageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChatMessageResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ChatMessageResponse</returns>
        public ChatMessageResponse PostChatMessage (PostChatMessage body)
        {
             ApiResponse<ChatMessageResponse> localVarResponse = PostChatMessageWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ChatMessageResponse</returns>
        public ApiResponse< ChatMessageResponse > PostChatMessageWithHttpInfo (PostChatMessage body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ChatApi->PostChatMessage");

            var localVarPath = "/chat/postchatmessage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostChatMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChatMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChatMessageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChatMessageResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ChatMessageResponse</returns>
        public async System.Threading.Tasks.Task<ChatMessageResponse> PostChatMessageAsync (PostChatMessage body)
        {
             ApiResponse<ChatMessageResponse> localVarResponse = await PostChatMessageAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ChatMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChatMessageResponse>> PostChatMessageAsyncWithHttpInfo (PostChatMessage body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ChatApi->PostChatMessage");

            var localVarPath = "/chat/postchatmessage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer_access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostChatMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChatMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChatMessageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChatMessageResponse)));
            
        }

    }
}
