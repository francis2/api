/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// Command
    /// </summary>
    [DataContract]
    public partial class Command :  IEquatable<Command>
    {
        /// <summary>
        /// Cancel, Modify, New
        /// </summary>
        /// <value>Cancel, Modify, New</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CommandTypeEnum
        {
            
            /// <summary>
            /// Enum Cancel for "Cancel"
            /// </summary>
            [EnumMember(Value = "Cancel")]
            Cancel,
            
            /// <summary>
            /// Enum Modify for "Modify"
            /// </summary>
            [EnumMember(Value = "Modify")]
            Modify,
            
            /// <summary>
            /// Enum New for "New"
            /// </summary>
            [EnumMember(Value = "New")]
            New
        }

        /// <summary>
        /// AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected
        /// </summary>
        /// <value>AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CommandStatusEnum
        {
            
            /// <summary>
            /// Enum AtExecution for "AtExecution"
            /// </summary>
            [EnumMember(Value = "AtExecution")]
            AtExecution,
            
            /// <summary>
            /// Enum ExecutionRejected for "ExecutionRejected"
            /// </summary>
            [EnumMember(Value = "ExecutionRejected")]
            ExecutionRejected,
            
            /// <summary>
            /// Enum ExecutionStopped for "ExecutionStopped"
            /// </summary>
            [EnumMember(Value = "ExecutionStopped")]
            ExecutionStopped,
            
            /// <summary>
            /// Enum ExecutionSuspended for "ExecutionSuspended"
            /// </summary>
            [EnumMember(Value = "ExecutionSuspended")]
            ExecutionSuspended,
            
            /// <summary>
            /// Enum OnHold for "OnHold"
            /// </summary>
            [EnumMember(Value = "OnHold")]
            OnHold,
            
            /// <summary>
            /// Enum Pending for "Pending"
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending,
            
            /// <summary>
            /// Enum PendingExecution for "PendingExecution"
            /// </summary>
            [EnumMember(Value = "PendingExecution")]
            PendingExecution,
            
            /// <summary>
            /// Enum Replaced for "Replaced"
            /// </summary>
            [EnumMember(Value = "Replaced")]
            Replaced,
            
            /// <summary>
            /// Enum RiskPassed for "RiskPassed"
            /// </summary>
            [EnumMember(Value = "RiskPassed")]
            RiskPassed,
            
            /// <summary>
            /// Enum RiskRejected for "RiskRejected"
            /// </summary>
            [EnumMember(Value = "RiskRejected")]
            RiskRejected
        }

        /// <summary>
        /// Cancel, Modify, New
        /// </summary>
        /// <value>Cancel, Modify, New</value>
        [DataMember(Name="commandType", EmitDefaultValue=false)]
        public CommandTypeEnum? CommandType { get; set; }
        /// <summary>
        /// AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected
        /// </summary>
        /// <value>AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected</value>
        [DataMember(Name="commandStatus", EmitDefaultValue=false)]
        public CommandStatusEnum? CommandStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Command" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Command() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Command" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="OrderId">id of Order (required).</param>
        /// <param name="Timestamp">Timestamp (required).</param>
        /// <param name="ClOrdId">ClOrdId.</param>
        /// <param name="CommandType">Cancel, Modify, New (required).</param>
        /// <param name="CommandStatus">AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected (required).</param>
        /// <param name="SenderId">id of User.</param>
        /// <param name="UserSessionId">id of UserSession.</param>
        /// <param name="ActivationTime">ActivationTime.</param>
        /// <param name="CustomTag50">CustomTag50.</param>
        public Command(int? Id = null, int? OrderId = null, DateTime? Timestamp = null, string ClOrdId = null, CommandTypeEnum? CommandType = null, CommandStatusEnum? CommandStatus = null, int? SenderId = null, int? UserSessionId = null, DateTime? ActivationTime = null, string CustomTag50 = null)
        {
            // to ensure "OrderId" is required (not null)
            if (OrderId == null)
            {
                throw new InvalidDataException("OrderId is a required property for Command and cannot be null");
            }
            else
            {
                this.OrderId = OrderId;
            }
            // to ensure "Timestamp" is required (not null)
            if (Timestamp == null)
            {
                throw new InvalidDataException("Timestamp is a required property for Command and cannot be null");
            }
            else
            {
                this.Timestamp = Timestamp;
            }
            // to ensure "CommandType" is required (not null)
            if (CommandType == null)
            {
                throw new InvalidDataException("CommandType is a required property for Command and cannot be null");
            }
            else
            {
                this.CommandType = CommandType;
            }
            // to ensure "CommandStatus" is required (not null)
            if (CommandStatus == null)
            {
                throw new InvalidDataException("CommandStatus is a required property for Command and cannot be null");
            }
            else
            {
                this.CommandStatus = CommandStatus;
            }
            this.Id = Id;
            this.ClOrdId = ClOrdId;
            this.SenderId = SenderId;
            this.UserSessionId = UserSessionId;
            this.ActivationTime = ActivationTime;
            this.CustomTag50 = CustomTag50;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// id of Order
        /// </summary>
        /// <value>id of Order</value>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public int? OrderId { get; set; }
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }
        /// <summary>
        /// Gets or Sets ClOrdId
        /// </summary>
        [DataMember(Name="clOrdId", EmitDefaultValue=false)]
        public string ClOrdId { get; set; }
        /// <summary>
        /// id of User
        /// </summary>
        /// <value>id of User</value>
        [DataMember(Name="senderId", EmitDefaultValue=false)]
        public int? SenderId { get; set; }
        /// <summary>
        /// id of UserSession
        /// </summary>
        /// <value>id of UserSession</value>
        [DataMember(Name="userSessionId", EmitDefaultValue=false)]
        public int? UserSessionId { get; set; }
        /// <summary>
        /// Gets or Sets ActivationTime
        /// </summary>
        [DataMember(Name="activationTime", EmitDefaultValue=false)]
        public DateTime? ActivationTime { get; set; }
        /// <summary>
        /// Gets or Sets CustomTag50
        /// </summary>
        [DataMember(Name="customTag50", EmitDefaultValue=false)]
        public string CustomTag50 { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Command {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  ClOrdId: ").Append(ClOrdId).Append("\n");
            sb.Append("  CommandType: ").Append(CommandType).Append("\n");
            sb.Append("  CommandStatus: ").Append(CommandStatus).Append("\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  UserSessionId: ").Append(UserSessionId).Append("\n");
            sb.Append("  ActivationTime: ").Append(ActivationTime).Append("\n");
            sb.Append("  CustomTag50: ").Append(CustomTag50).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Command);
        }

        /// <summary>
        /// Returns true if Command instances are equal
        /// </summary>
        /// <param name="other">Instance of Command to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Command other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.OrderId == other.OrderId ||
                    this.OrderId != null &&
                    this.OrderId.Equals(other.OrderId)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.ClOrdId == other.ClOrdId ||
                    this.ClOrdId != null &&
                    this.ClOrdId.Equals(other.ClOrdId)
                ) && 
                (
                    this.CommandType == other.CommandType ||
                    this.CommandType != null &&
                    this.CommandType.Equals(other.CommandType)
                ) && 
                (
                    this.CommandStatus == other.CommandStatus ||
                    this.CommandStatus != null &&
                    this.CommandStatus.Equals(other.CommandStatus)
                ) && 
                (
                    this.SenderId == other.SenderId ||
                    this.SenderId != null &&
                    this.SenderId.Equals(other.SenderId)
                ) && 
                (
                    this.UserSessionId == other.UserSessionId ||
                    this.UserSessionId != null &&
                    this.UserSessionId.Equals(other.UserSessionId)
                ) && 
                (
                    this.ActivationTime == other.ActivationTime ||
                    this.ActivationTime != null &&
                    this.ActivationTime.Equals(other.ActivationTime)
                ) && 
                (
                    this.CustomTag50 == other.CustomTag50 ||
                    this.CustomTag50 != null &&
                    this.CustomTag50.Equals(other.CustomTag50)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.OrderId != null)
                    hash = hash * 59 + this.OrderId.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.ClOrdId != null)
                    hash = hash * 59 + this.ClOrdId.GetHashCode();
                if (this.CommandType != null)
                    hash = hash * 59 + this.CommandType.GetHashCode();
                if (this.CommandStatus != null)
                    hash = hash * 59 + this.CommandStatus.GetHashCode();
                if (this.SenderId != null)
                    hash = hash * 59 + this.SenderId.GetHashCode();
                if (this.UserSessionId != null)
                    hash = hash * 59 + this.UserSessionId.GetHashCode();
                if (this.ActivationTime != null)
                    hash = hash * 59 + this.ActivationTime.GetHashCode();
                if (this.CustomTag50 != null)
                    hash = hash * 59 + this.CustomTag50.GetHashCode();
                return hash;
            }
        }
    }

}
