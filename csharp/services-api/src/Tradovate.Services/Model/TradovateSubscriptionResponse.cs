/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// TradovateSubscriptionResponse
    /// </summary>
    [DataContract]
    public partial class TradovateSubscriptionResponse :  IEquatable<TradovateSubscriptionResponse>
    {
        /// <summary>
        /// ConflictWithExisting, DowngradeNotAllowed, IncompatibleCMEMarketDataSubscriptionPlans, IncorrectPaymentMethod, InsufficientFunds, PaymentProviderError, PlanDiscontinued, SingleTrialOnly, Success, UnknownError
        /// </summary>
        /// <value>ConflictWithExisting, DowngradeNotAllowed, IncompatibleCMEMarketDataSubscriptionPlans, IncorrectPaymentMethod, InsufficientFunds, PaymentProviderError, PlanDiscontinued, SingleTrialOnly, Success, UnknownError</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ErrorCodeEnum
        {
            
            /// <summary>
            /// Enum IncorrectPaymentMethod for "IncorrectPaymentMethod"
            /// </summary>
            [EnumMember(Value = "IncorrectPaymentMethod")]
            IncorrectPaymentMethod,
            
            /// <summary>
            /// Enum UnknownError for "UnknownError"
            /// </summary>
            [EnumMember(Value = "UnknownError")]
            UnknownError,
            
            /// <summary>
            /// Enum IncompatibleCMEMarketDataSubscriptionPlans for "IncompatibleCMEMarketDataSubscriptionPlans"
            /// </summary>
            [EnumMember(Value = "IncompatibleCMEMarketDataSubscriptionPlans")]
            IncompatibleCMEMarketDataSubscriptionPlans,
            
            /// <summary>
            /// Enum InsufficientFunds for "InsufficientFunds"
            /// </summary>
            [EnumMember(Value = "InsufficientFunds")]
            InsufficientFunds,
            
            /// <summary>
            /// Enum ConflictWithExisting for "ConflictWithExisting"
            /// </summary>
            [EnumMember(Value = "ConflictWithExisting")]
            ConflictWithExisting,
            
            /// <summary>
            /// Enum PaymentProviderError for "PaymentProviderError"
            /// </summary>
            [EnumMember(Value = "PaymentProviderError")]
            PaymentProviderError,
            
            /// <summary>
            /// Enum PlanDiscontinued for "PlanDiscontinued"
            /// </summary>
            [EnumMember(Value = "PlanDiscontinued")]
            PlanDiscontinued,
            
            /// <summary>
            /// Enum DowngradeNotAllowed for "DowngradeNotAllowed"
            /// </summary>
            [EnumMember(Value = "DowngradeNotAllowed")]
            DowngradeNotAllowed,
            
            /// <summary>
            /// Enum SingleTrialOnly for "SingleTrialOnly"
            /// </summary>
            [EnumMember(Value = "SingleTrialOnly")]
            SingleTrialOnly,
            
            /// <summary>
            /// Enum Success for "Success"
            /// </summary>
            [EnumMember(Value = "Success")]
            Success
        }

        /// <summary>
        /// ConflictWithExisting, DowngradeNotAllowed, IncompatibleCMEMarketDataSubscriptionPlans, IncorrectPaymentMethod, InsufficientFunds, PaymentProviderError, PlanDiscontinued, SingleTrialOnly, Success, UnknownError
        /// </summary>
        /// <value>ConflictWithExisting, DowngradeNotAllowed, IncompatibleCMEMarketDataSubscriptionPlans, IncorrectPaymentMethod, InsufficientFunds, PaymentProviderError, PlanDiscontinued, SingleTrialOnly, Success, UnknownError</value>
        [DataMember(Name="errorCode", EmitDefaultValue=false)]
        public ErrorCodeEnum? ErrorCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TradovateSubscriptionResponse" /> class.
        /// </summary>
        /// <param name="ErrorText">Non-empty if the request failed.</param>
        /// <param name="ErrorCode">ConflictWithExisting, DowngradeNotAllowed, IncompatibleCMEMarketDataSubscriptionPlans, IncorrectPaymentMethod, InsufficientFunds, PaymentProviderError, PlanDiscontinued, SingleTrialOnly, Success, UnknownError.</param>
        /// <param name="TradovateSubscription">TradovateSubscription.</param>
        public TradovateSubscriptionResponse(string ErrorText = null, ErrorCodeEnum? ErrorCode = null, TradovateSubscription TradovateSubscription = null)
        {
            this.ErrorText = ErrorText;
            this.ErrorCode = ErrorCode;
            this.TradovateSubscription = TradovateSubscription;
        }
        
        /// <summary>
        /// Non-empty if the request failed
        /// </summary>
        /// <value>Non-empty if the request failed</value>
        [DataMember(Name="errorText", EmitDefaultValue=false)]
        public string ErrorText { get; set; }
        /// <summary>
        /// Gets or Sets TradovateSubscription
        /// </summary>
        [DataMember(Name="tradovateSubscription", EmitDefaultValue=false)]
        public TradovateSubscription TradovateSubscription { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TradovateSubscriptionResponse {\n");
            sb.Append("  ErrorText: ").Append(ErrorText).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  TradovateSubscription: ").Append(TradovateSubscription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TradovateSubscriptionResponse);
        }

        /// <summary>
        /// Returns true if TradovateSubscriptionResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of TradovateSubscriptionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradovateSubscriptionResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ErrorText == other.ErrorText ||
                    this.ErrorText != null &&
                    this.ErrorText.Equals(other.ErrorText)
                ) && 
                (
                    this.ErrorCode == other.ErrorCode ||
                    this.ErrorCode != null &&
                    this.ErrorCode.Equals(other.ErrorCode)
                ) && 
                (
                    this.TradovateSubscription == other.TradovateSubscription ||
                    this.TradovateSubscription != null &&
                    this.TradovateSubscription.Equals(other.TradovateSubscription)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ErrorText != null)
                    hash = hash * 59 + this.ErrorText.GetHashCode();
                if (this.ErrorCode != null)
                    hash = hash * 59 + this.ErrorCode.GetHashCode();
                if (this.TradovateSubscription != null)
                    hash = hash * 59 + this.TradovateSubscription.GetHashCode();
                return hash;
            }
        }
    }

}
