/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// TradovateSubscriptionPlan
    /// </summary>
    [DataContract]
    public partial class TradovateSubscriptionPlan :  IEquatable<TradovateSubscriptionPlan>
    {
        /// <summary>
        /// Month, Quarter, Week, Year
        /// </summary>
        /// <value>Month, Quarter, Week, Year</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DurationUnitsEnum
        {
            
            /// <summary>
            /// Enum Month for "Month"
            /// </summary>
            [EnumMember(Value = "Month")]
            Month,
            
            /// <summary>
            /// Enum Quarter for "Quarter"
            /// </summary>
            [EnumMember(Value = "Quarter")]
            Quarter,
            
            /// <summary>
            /// Enum Week for "Week"
            /// </summary>
            [EnumMember(Value = "Week")]
            Week,
            
            /// <summary>
            /// Enum Year for "Year"
            /// </summary>
            [EnumMember(Value = "Year")]
            Year
        }

        /// <summary>
        /// Month, Quarter, Week, Year
        /// </summary>
        /// <value>Month, Quarter, Week, Year</value>
        [DataMember(Name="durationUnits", EmitDefaultValue=false)]
        public DurationUnitsEnum? DurationUnits { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TradovateSubscriptionPlan" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TradovateSubscriptionPlan() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TradovateSubscriptionPlan" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name (required).</param>
        /// <param name="Title">Title (required).</param>
        /// <param name="Price">Price (required).</param>
        /// <param name="StartDate">StartDate.</param>
        /// <param name="DiscontinuedDate">DiscontinuedDate.</param>
        /// <param name="Category">Category (required).</param>
        /// <param name="Trial">Trial (required).</param>
        /// <param name="Duration">Duration (required).</param>
        /// <param name="DurationUnits">Month, Quarter, Week, Year (required).</param>
        /// <param name="MultipleAccounts">MultipleAccounts.</param>
        /// <param name="OrganizationId">id of Organization.</param>
        /// <param name="ReplaySessions">ReplaySessions.</param>
        /// <param name="Footnote">Footnote.</param>
        public TradovateSubscriptionPlan(int? Id = null, string Name = null, string Title = null, double? Price = null, TradeDate StartDate = null, TradeDate DiscontinuedDate = null, string Category = null, bool? Trial = null, int? Duration = null, DurationUnitsEnum? DurationUnits = null, bool? MultipleAccounts = null, int? OrganizationId = null, int? ReplaySessions = null, string Footnote = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for TradovateSubscriptionPlan and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Title" is required (not null)
            if (Title == null)
            {
                throw new InvalidDataException("Title is a required property for TradovateSubscriptionPlan and cannot be null");
            }
            else
            {
                this.Title = Title;
            }
            // to ensure "Price" is required (not null)
            if (Price == null)
            {
                throw new InvalidDataException("Price is a required property for TradovateSubscriptionPlan and cannot be null");
            }
            else
            {
                this.Price = Price;
            }
            // to ensure "Category" is required (not null)
            if (Category == null)
            {
                throw new InvalidDataException("Category is a required property for TradovateSubscriptionPlan and cannot be null");
            }
            else
            {
                this.Category = Category;
            }
            // to ensure "Trial" is required (not null)
            if (Trial == null)
            {
                throw new InvalidDataException("Trial is a required property for TradovateSubscriptionPlan and cannot be null");
            }
            else
            {
                this.Trial = Trial;
            }
            // to ensure "Duration" is required (not null)
            if (Duration == null)
            {
                throw new InvalidDataException("Duration is a required property for TradovateSubscriptionPlan and cannot be null");
            }
            else
            {
                this.Duration = Duration;
            }
            // to ensure "DurationUnits" is required (not null)
            if (DurationUnits == null)
            {
                throw new InvalidDataException("DurationUnits is a required property for TradovateSubscriptionPlan and cannot be null");
            }
            else
            {
                this.DurationUnits = DurationUnits;
            }
            this.Id = Id;
            this.StartDate = StartDate;
            this.DiscontinuedDate = DiscontinuedDate;
            this.MultipleAccounts = MultipleAccounts;
            this.OrganizationId = OrganizationId;
            this.ReplaySessions = ReplaySessions;
            this.Footnote = Footnote;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }
        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public TradeDate StartDate { get; set; }
        /// <summary>
        /// Gets or Sets DiscontinuedDate
        /// </summary>
        [DataMember(Name="discontinuedDate", EmitDefaultValue=false)]
        public TradeDate DiscontinuedDate { get; set; }
        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }
        /// <summary>
        /// Gets or Sets Trial
        /// </summary>
        [DataMember(Name="trial", EmitDefaultValue=false)]
        public bool? Trial { get; set; }
        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? Duration { get; set; }
        /// <summary>
        /// Gets or Sets MultipleAccounts
        /// </summary>
        [DataMember(Name="multipleAccounts", EmitDefaultValue=false)]
        public bool? MultipleAccounts { get; set; }
        /// <summary>
        /// id of Organization
        /// </summary>
        /// <value>id of Organization</value>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public int? OrganizationId { get; set; }
        /// <summary>
        /// Gets or Sets ReplaySessions
        /// </summary>
        [DataMember(Name="replaySessions", EmitDefaultValue=false)]
        public int? ReplaySessions { get; set; }
        /// <summary>
        /// Gets or Sets Footnote
        /// </summary>
        [DataMember(Name="footnote", EmitDefaultValue=false)]
        public string Footnote { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TradovateSubscriptionPlan {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  DiscontinuedDate: ").Append(DiscontinuedDate).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Trial: ").Append(Trial).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  DurationUnits: ").Append(DurationUnits).Append("\n");
            sb.Append("  MultipleAccounts: ").Append(MultipleAccounts).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  ReplaySessions: ").Append(ReplaySessions).Append("\n");
            sb.Append("  Footnote: ").Append(Footnote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TradovateSubscriptionPlan);
        }

        /// <summary>
        /// Returns true if TradovateSubscriptionPlan instances are equal
        /// </summary>
        /// <param name="other">Instance of TradovateSubscriptionPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradovateSubscriptionPlan other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                ) && 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.DiscontinuedDate == other.DiscontinuedDate ||
                    this.DiscontinuedDate != null &&
                    this.DiscontinuedDate.Equals(other.DiscontinuedDate)
                ) && 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                ) && 
                (
                    this.Trial == other.Trial ||
                    this.Trial != null &&
                    this.Trial.Equals(other.Trial)
                ) && 
                (
                    this.Duration == other.Duration ||
                    this.Duration != null &&
                    this.Duration.Equals(other.Duration)
                ) && 
                (
                    this.DurationUnits == other.DurationUnits ||
                    this.DurationUnits != null &&
                    this.DurationUnits.Equals(other.DurationUnits)
                ) && 
                (
                    this.MultipleAccounts == other.MultipleAccounts ||
                    this.MultipleAccounts != null &&
                    this.MultipleAccounts.Equals(other.MultipleAccounts)
                ) && 
                (
                    this.OrganizationId == other.OrganizationId ||
                    this.OrganizationId != null &&
                    this.OrganizationId.Equals(other.OrganizationId)
                ) && 
                (
                    this.ReplaySessions == other.ReplaySessions ||
                    this.ReplaySessions != null &&
                    this.ReplaySessions.Equals(other.ReplaySessions)
                ) && 
                (
                    this.Footnote == other.Footnote ||
                    this.Footnote != null &&
                    this.Footnote.Equals(other.Footnote)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                if (this.DiscontinuedDate != null)
                    hash = hash * 59 + this.DiscontinuedDate.GetHashCode();
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                if (this.Trial != null)
                    hash = hash * 59 + this.Trial.GetHashCode();
                if (this.Duration != null)
                    hash = hash * 59 + this.Duration.GetHashCode();
                if (this.DurationUnits != null)
                    hash = hash * 59 + this.DurationUnits.GetHashCode();
                if (this.MultipleAccounts != null)
                    hash = hash * 59 + this.MultipleAccounts.GetHashCode();
                if (this.OrganizationId != null)
                    hash = hash * 59 + this.OrganizationId.GetHashCode();
                if (this.ReplaySessions != null)
                    hash = hash * 59 + this.ReplaySessions.GetHashCode();
                if (this.Footnote != null)
                    hash = hash * 59 + this.Footnote.GetHashCode();
                return hash;
            }
        }
    }

}
