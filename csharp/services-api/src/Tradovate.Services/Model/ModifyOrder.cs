/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// ModifyOrder
    /// </summary>
    [DataContract]
    public partial class ModifyOrder :  IEquatable<ModifyOrder>
    {
        /// <summary>
        /// Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit
        /// </summary>
        /// <value>Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderTypeEnum
        {
            
            /// <summary>
            /// Enum Limit for "Limit"
            /// </summary>
            [EnumMember(Value = "Limit")]
            Limit,
            
            /// <summary>
            /// Enum MIT for "MIT"
            /// </summary>
            [EnumMember(Value = "MIT")]
            MIT,
            
            /// <summary>
            /// Enum Market for "Market"
            /// </summary>
            [EnumMember(Value = "Market")]
            Market,
            
            /// <summary>
            /// Enum QTS for "QTS"
            /// </summary>
            [EnumMember(Value = "QTS")]
            QTS,
            
            /// <summary>
            /// Enum Stop for "Stop"
            /// </summary>
            [EnumMember(Value = "Stop")]
            Stop,
            
            /// <summary>
            /// Enum StopLimit for "StopLimit"
            /// </summary>
            [EnumMember(Value = "StopLimit")]
            StopLimit,
            
            /// <summary>
            /// Enum TrailingStop for "TrailingStop"
            /// </summary>
            [EnumMember(Value = "TrailingStop")]
            TrailingStop,
            
            /// <summary>
            /// Enum TrailingStopLimit for "TrailingStopLimit"
            /// </summary>
            [EnumMember(Value = "TrailingStopLimit")]
            TrailingStopLimit
        }

        /// <summary>
        /// Day, FOK, GTC, GTD, IOC
        /// </summary>
        /// <value>Day, FOK, GTC, GTD, IOC</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TimeInForceEnum
        {
            
            /// <summary>
            /// Enum Day for "Day"
            /// </summary>
            [EnumMember(Value = "Day")]
            Day,
            
            /// <summary>
            /// Enum FOK for "FOK"
            /// </summary>
            [EnumMember(Value = "FOK")]
            FOK,
            
            /// <summary>
            /// Enum GTC for "GTC"
            /// </summary>
            [EnumMember(Value = "GTC")]
            GTC,
            
            /// <summary>
            /// Enum GTD for "GTD"
            /// </summary>
            [EnumMember(Value = "GTD")]
            GTD,
            
            /// <summary>
            /// Enum IOC for "IOC"
            /// </summary>
            [EnumMember(Value = "IOC")]
            IOC
        }

        /// <summary>
        /// Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit
        /// </summary>
        /// <value>Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit</value>
        [DataMember(Name="orderType", EmitDefaultValue=false)]
        public OrderTypeEnum? OrderType { get; set; }
        /// <summary>
        /// Day, FOK, GTC, GTD, IOC
        /// </summary>
        /// <value>Day, FOK, GTC, GTD, IOC</value>
        [DataMember(Name="timeInForce", EmitDefaultValue=false)]
        public TimeInForceEnum? TimeInForce { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModifyOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModifyOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModifyOrder" /> class.
        /// </summary>
        /// <param name="OrderId">id of Order (required).</param>
        /// <param name="ClOrdId">ClOrdId.</param>
        /// <param name="OrderQty">OrderQty (required).</param>
        /// <param name="OrderType">Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit (required).</param>
        /// <param name="Price">Price.</param>
        /// <param name="StopPrice">StopPrice.</param>
        /// <param name="MaxShow">MaxShow.</param>
        /// <param name="PegDifference">PegDifference.</param>
        /// <param name="TimeInForce">Day, FOK, GTC, GTD, IOC.</param>
        /// <param name="ExpireTime">ExpireTime.</param>
        /// <param name="Text">Text.</param>
        /// <param name="ActivationTime">ActivationTime.</param>
        /// <param name="CustomTag50">CustomTag50.</param>
        public ModifyOrder(int? OrderId = null, string ClOrdId = null, int? OrderQty = null, OrderTypeEnum? OrderType = null, double? Price = null, double? StopPrice = null, int? MaxShow = null, double? PegDifference = null, TimeInForceEnum? TimeInForce = null, DateTime? ExpireTime = null, string Text = null, DateTime? ActivationTime = null, string CustomTag50 = null)
        {
            // to ensure "OrderId" is required (not null)
            if (OrderId == null)
            {
                throw new InvalidDataException("OrderId is a required property for ModifyOrder and cannot be null");
            }
            else
            {
                this.OrderId = OrderId;
            }
            // to ensure "OrderQty" is required (not null)
            if (OrderQty == null)
            {
                throw new InvalidDataException("OrderQty is a required property for ModifyOrder and cannot be null");
            }
            else
            {
                this.OrderQty = OrderQty;
            }
            // to ensure "OrderType" is required (not null)
            if (OrderType == null)
            {
                throw new InvalidDataException("OrderType is a required property for ModifyOrder and cannot be null");
            }
            else
            {
                this.OrderType = OrderType;
            }
            this.ClOrdId = ClOrdId;
            this.Price = Price;
            this.StopPrice = StopPrice;
            this.MaxShow = MaxShow;
            this.PegDifference = PegDifference;
            this.TimeInForce = TimeInForce;
            this.ExpireTime = ExpireTime;
            this.Text = Text;
            this.ActivationTime = ActivationTime;
            this.CustomTag50 = CustomTag50;
        }
        
        /// <summary>
        /// id of Order
        /// </summary>
        /// <value>id of Order</value>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public int? OrderId { get; set; }
        /// <summary>
        /// Gets or Sets ClOrdId
        /// </summary>
        [DataMember(Name="clOrdId", EmitDefaultValue=false)]
        public string ClOrdId { get; set; }
        /// <summary>
        /// Gets or Sets OrderQty
        /// </summary>
        [DataMember(Name="orderQty", EmitDefaultValue=false)]
        public int? OrderQty { get; set; }
        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }
        /// <summary>
        /// Gets or Sets StopPrice
        /// </summary>
        [DataMember(Name="stopPrice", EmitDefaultValue=false)]
        public double? StopPrice { get; set; }
        /// <summary>
        /// Gets or Sets MaxShow
        /// </summary>
        [DataMember(Name="maxShow", EmitDefaultValue=false)]
        public int? MaxShow { get; set; }
        /// <summary>
        /// Gets or Sets PegDifference
        /// </summary>
        [DataMember(Name="pegDifference", EmitDefaultValue=false)]
        public double? PegDifference { get; set; }
        /// <summary>
        /// Gets or Sets ExpireTime
        /// </summary>
        [DataMember(Name="expireTime", EmitDefaultValue=false)]
        public DateTime? ExpireTime { get; set; }
        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }
        /// <summary>
        /// Gets or Sets ActivationTime
        /// </summary>
        [DataMember(Name="activationTime", EmitDefaultValue=false)]
        public DateTime? ActivationTime { get; set; }
        /// <summary>
        /// Gets or Sets CustomTag50
        /// </summary>
        [DataMember(Name="customTag50", EmitDefaultValue=false)]
        public string CustomTag50 { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModifyOrder {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  ClOrdId: ").Append(ClOrdId).Append("\n");
            sb.Append("  OrderQty: ").Append(OrderQty).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  StopPrice: ").Append(StopPrice).Append("\n");
            sb.Append("  MaxShow: ").Append(MaxShow).Append("\n");
            sb.Append("  PegDifference: ").Append(PegDifference).Append("\n");
            sb.Append("  TimeInForce: ").Append(TimeInForce).Append("\n");
            sb.Append("  ExpireTime: ").Append(ExpireTime).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  ActivationTime: ").Append(ActivationTime).Append("\n");
            sb.Append("  CustomTag50: ").Append(CustomTag50).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ModifyOrder);
        }

        /// <summary>
        /// Returns true if ModifyOrder instances are equal
        /// </summary>
        /// <param name="other">Instance of ModifyOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModifyOrder other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OrderId == other.OrderId ||
                    this.OrderId != null &&
                    this.OrderId.Equals(other.OrderId)
                ) && 
                (
                    this.ClOrdId == other.ClOrdId ||
                    this.ClOrdId != null &&
                    this.ClOrdId.Equals(other.ClOrdId)
                ) && 
                (
                    this.OrderQty == other.OrderQty ||
                    this.OrderQty != null &&
                    this.OrderQty.Equals(other.OrderQty)
                ) && 
                (
                    this.OrderType == other.OrderType ||
                    this.OrderType != null &&
                    this.OrderType.Equals(other.OrderType)
                ) && 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                ) && 
                (
                    this.StopPrice == other.StopPrice ||
                    this.StopPrice != null &&
                    this.StopPrice.Equals(other.StopPrice)
                ) && 
                (
                    this.MaxShow == other.MaxShow ||
                    this.MaxShow != null &&
                    this.MaxShow.Equals(other.MaxShow)
                ) && 
                (
                    this.PegDifference == other.PegDifference ||
                    this.PegDifference != null &&
                    this.PegDifference.Equals(other.PegDifference)
                ) && 
                (
                    this.TimeInForce == other.TimeInForce ||
                    this.TimeInForce != null &&
                    this.TimeInForce.Equals(other.TimeInForce)
                ) && 
                (
                    this.ExpireTime == other.ExpireTime ||
                    this.ExpireTime != null &&
                    this.ExpireTime.Equals(other.ExpireTime)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.ActivationTime == other.ActivationTime ||
                    this.ActivationTime != null &&
                    this.ActivationTime.Equals(other.ActivationTime)
                ) && 
                (
                    this.CustomTag50 == other.CustomTag50 ||
                    this.CustomTag50 != null &&
                    this.CustomTag50.Equals(other.CustomTag50)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OrderId != null)
                    hash = hash * 59 + this.OrderId.GetHashCode();
                if (this.ClOrdId != null)
                    hash = hash * 59 + this.ClOrdId.GetHashCode();
                if (this.OrderQty != null)
                    hash = hash * 59 + this.OrderQty.GetHashCode();
                if (this.OrderType != null)
                    hash = hash * 59 + this.OrderType.GetHashCode();
                if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                if (this.StopPrice != null)
                    hash = hash * 59 + this.StopPrice.GetHashCode();
                if (this.MaxShow != null)
                    hash = hash * 59 + this.MaxShow.GetHashCode();
                if (this.PegDifference != null)
                    hash = hash * 59 + this.PegDifference.GetHashCode();
                if (this.TimeInForce != null)
                    hash = hash * 59 + this.TimeInForce.GetHashCode();
                if (this.ExpireTime != null)
                    hash = hash * 59 + this.ExpireTime.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.ActivationTime != null)
                    hash = hash * 59 + this.ActivationTime.GetHashCode();
                if (this.CustomTag50 != null)
                    hash = hash * 59 + this.CustomTag50.GetHashCode();
                return hash;
            }
        }
    }

}
