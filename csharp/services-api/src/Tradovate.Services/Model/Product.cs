/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// Product
    /// </summary>
    [DataContract]
    public partial class Product :  IEquatable<Product>
    {
        /// <summary>
        /// Cryptocurrency, Futures, MarketInternals, Options, Spread
        /// </summary>
        /// <value>Cryptocurrency, Futures, MarketInternals, Options, Spread</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProductTypeEnum
        {
            
            /// <summary>
            /// Enum Cryptocurrency for "Cryptocurrency"
            /// </summary>
            [EnumMember(Value = "Cryptocurrency")]
            Cryptocurrency,
            
            /// <summary>
            /// Enum Futures for "Futures"
            /// </summary>
            [EnumMember(Value = "Futures")]
            Futures,
            
            /// <summary>
            /// Enum MarketInternals for "MarketInternals"
            /// </summary>
            [EnumMember(Value = "MarketInternals")]
            MarketInternals,
            
            /// <summary>
            /// Enum Options for "Options"
            /// </summary>
            [EnumMember(Value = "Options")]
            Options,
            
            /// <summary>
            /// Enum Spread for "Spread"
            /// </summary>
            [EnumMember(Value = "Spread")]
            Spread
        }

        /// <summary>
        /// Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified
        /// </summary>
        /// <value>Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum ReadyToTrade for "ReadyToTrade"
            /// </summary>
            [EnumMember(Value = "ReadyToTrade")]
            ReadyToTrade,
            
            /// <summary>
            /// Enum Inactive for "Inactive"
            /// </summary>
            [EnumMember(Value = "Inactive")]
            Inactive,
            
            /// <summary>
            /// Enum Verified for "Verified"
            /// </summary>
            [EnumMember(Value = "Verified")]
            Verified,
            
            /// <summary>
            /// Enum Locked for "Locked"
            /// </summary>
            [EnumMember(Value = "Locked")]
            Locked,
            
            /// <summary>
            /// Enum ReadyForContracts for "ReadyForContracts"
            /// </summary>
            [EnumMember(Value = "ReadyForContracts")]
            ReadyForContracts
        }

        /// <summary>
        /// Decimal, Fractional
        /// </summary>
        /// <value>Decimal, Fractional</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriceFormatTypeEnum
        {
            
            /// <summary>
            /// Enum Decimal for "Decimal"
            /// </summary>
            [EnumMember(Value = "Decimal")]
            Decimal,
            
            /// <summary>
            /// Enum Fractional for "Fractional"
            /// </summary>
            [EnumMember(Value = "Fractional")]
            Fractional
        }

        /// <summary>
        /// Cryptocurrency, Futures, MarketInternals, Options, Spread
        /// </summary>
        /// <value>Cryptocurrency, Futures, MarketInternals, Options, Spread</value>
        [DataMember(Name="productType", EmitDefaultValue=false)]
        public ProductTypeEnum? ProductType { get; set; }
        /// <summary>
        /// Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified
        /// </summary>
        /// <value>Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Decimal, Fractional
        /// </summary>
        /// <value>Decimal, Fractional</value>
        [DataMember(Name="priceFormatType", EmitDefaultValue=false)]
        public PriceFormatTypeEnum? PriceFormatType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Product() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name (required).</param>
        /// <param name="CurrencyId">id of Currency (required).</param>
        /// <param name="ProductType">Cryptocurrency, Futures, MarketInternals, Options, Spread (required).</param>
        /// <param name="Description">Description (required).</param>
        /// <param name="ExchangeId">id of Exchange (required).</param>
        /// <param name="ContractGroupId">id of ContractGroup (required).</param>
        /// <param name="RiskDiscountContractGroupId">id of RiskDiscountContractGroup.</param>
        /// <param name="Status">Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified (required).</param>
        /// <param name="Months">Months.</param>
        /// <param name="IsSecured">IsSecured.</param>
        /// <param name="ValuePerPoint">ValuePerPoint (required).</param>
        /// <param name="PriceFormatType">Decimal, Fractional (required).</param>
        /// <param name="PriceFormat">PriceFormat (required).</param>
        /// <param name="TickSize">Product Tick Size (required).</param>
        public Product(int? Id = null, string Name = null, int? CurrencyId = null, ProductTypeEnum? ProductType = null, string Description = null, int? ExchangeId = null, int? ContractGroupId = null, int? RiskDiscountContractGroupId = null, StatusEnum? Status = null, string Months = null, bool? IsSecured = null, double? ValuePerPoint = null, PriceFormatTypeEnum? PriceFormatType = null, int? PriceFormat = null, double? TickSize = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for Product and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "CurrencyId" is required (not null)
            if (CurrencyId == null)
            {
                throw new InvalidDataException("CurrencyId is a required property for Product and cannot be null");
            }
            else
            {
                this.CurrencyId = CurrencyId;
            }
            // to ensure "ProductType" is required (not null)
            if (ProductType == null)
            {
                throw new InvalidDataException("ProductType is a required property for Product and cannot be null");
            }
            else
            {
                this.ProductType = ProductType;
            }
            // to ensure "Description" is required (not null)
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for Product and cannot be null");
            }
            else
            {
                this.Description = Description;
            }
            // to ensure "ExchangeId" is required (not null)
            if (ExchangeId == null)
            {
                throw new InvalidDataException("ExchangeId is a required property for Product and cannot be null");
            }
            else
            {
                this.ExchangeId = ExchangeId;
            }
            // to ensure "ContractGroupId" is required (not null)
            if (ContractGroupId == null)
            {
                throw new InvalidDataException("ContractGroupId is a required property for Product and cannot be null");
            }
            else
            {
                this.ContractGroupId = ContractGroupId;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for Product and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            // to ensure "ValuePerPoint" is required (not null)
            if (ValuePerPoint == null)
            {
                throw new InvalidDataException("ValuePerPoint is a required property for Product and cannot be null");
            }
            else
            {
                this.ValuePerPoint = ValuePerPoint;
            }
            // to ensure "PriceFormatType" is required (not null)
            if (PriceFormatType == null)
            {
                throw new InvalidDataException("PriceFormatType is a required property for Product and cannot be null");
            }
            else
            {
                this.PriceFormatType = PriceFormatType;
            }
            // to ensure "PriceFormat" is required (not null)
            if (PriceFormat == null)
            {
                throw new InvalidDataException("PriceFormat is a required property for Product and cannot be null");
            }
            else
            {
                this.PriceFormat = PriceFormat;
            }
            // to ensure "TickSize" is required (not null)
            if (TickSize == null)
            {
                throw new InvalidDataException("TickSize is a required property for Product and cannot be null");
            }
            else
            {
                this.TickSize = TickSize;
            }
            this.Id = Id;
            this.RiskDiscountContractGroupId = RiskDiscountContractGroupId;
            this.Months = Months;
            this.IsSecured = IsSecured;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// id of Currency
        /// </summary>
        /// <value>id of Currency</value>
        [DataMember(Name="currencyId", EmitDefaultValue=false)]
        public int? CurrencyId { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// id of Exchange
        /// </summary>
        /// <value>id of Exchange</value>
        [DataMember(Name="exchangeId", EmitDefaultValue=false)]
        public int? ExchangeId { get; set; }
        /// <summary>
        /// id of ContractGroup
        /// </summary>
        /// <value>id of ContractGroup</value>
        [DataMember(Name="contractGroupId", EmitDefaultValue=false)]
        public int? ContractGroupId { get; set; }
        /// <summary>
        /// id of RiskDiscountContractGroup
        /// </summary>
        /// <value>id of RiskDiscountContractGroup</value>
        [DataMember(Name="riskDiscountContractGroupId", EmitDefaultValue=false)]
        public int? RiskDiscountContractGroupId { get; set; }
        /// <summary>
        /// Gets or Sets Months
        /// </summary>
        [DataMember(Name="months", EmitDefaultValue=false)]
        public string Months { get; set; }
        /// <summary>
        /// Gets or Sets IsSecured
        /// </summary>
        [DataMember(Name="isSecured", EmitDefaultValue=false)]
        public bool? IsSecured { get; set; }
        /// <summary>
        /// Gets or Sets ValuePerPoint
        /// </summary>
        [DataMember(Name="valuePerPoint", EmitDefaultValue=false)]
        public double? ValuePerPoint { get; set; }
        /// <summary>
        /// Gets or Sets PriceFormat
        /// </summary>
        [DataMember(Name="priceFormat", EmitDefaultValue=false)]
        public int? PriceFormat { get; set; }
        /// <summary>
        /// Product Tick Size
        /// </summary>
        /// <value>Product Tick Size</value>
        [DataMember(Name="tickSize", EmitDefaultValue=false)]
        public double? TickSize { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExchangeId: ").Append(ExchangeId).Append("\n");
            sb.Append("  ContractGroupId: ").Append(ContractGroupId).Append("\n");
            sb.Append("  RiskDiscountContractGroupId: ").Append(RiskDiscountContractGroupId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Months: ").Append(Months).Append("\n");
            sb.Append("  IsSecured: ").Append(IsSecured).Append("\n");
            sb.Append("  ValuePerPoint: ").Append(ValuePerPoint).Append("\n");
            sb.Append("  PriceFormatType: ").Append(PriceFormatType).Append("\n");
            sb.Append("  PriceFormat: ").Append(PriceFormat).Append("\n");
            sb.Append("  TickSize: ").Append(TickSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Product);
        }

        /// <summary>
        /// Returns true if Product instances are equal
        /// </summary>
        /// <param name="other">Instance of Product to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Product other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.CurrencyId == other.CurrencyId ||
                    this.CurrencyId != null &&
                    this.CurrencyId.Equals(other.CurrencyId)
                ) && 
                (
                    this.ProductType == other.ProductType ||
                    this.ProductType != null &&
                    this.ProductType.Equals(other.ProductType)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.ExchangeId == other.ExchangeId ||
                    this.ExchangeId != null &&
                    this.ExchangeId.Equals(other.ExchangeId)
                ) && 
                (
                    this.ContractGroupId == other.ContractGroupId ||
                    this.ContractGroupId != null &&
                    this.ContractGroupId.Equals(other.ContractGroupId)
                ) && 
                (
                    this.RiskDiscountContractGroupId == other.RiskDiscountContractGroupId ||
                    this.RiskDiscountContractGroupId != null &&
                    this.RiskDiscountContractGroupId.Equals(other.RiskDiscountContractGroupId)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Months == other.Months ||
                    this.Months != null &&
                    this.Months.Equals(other.Months)
                ) && 
                (
                    this.IsSecured == other.IsSecured ||
                    this.IsSecured != null &&
                    this.IsSecured.Equals(other.IsSecured)
                ) && 
                (
                    this.ValuePerPoint == other.ValuePerPoint ||
                    this.ValuePerPoint != null &&
                    this.ValuePerPoint.Equals(other.ValuePerPoint)
                ) && 
                (
                    this.PriceFormatType == other.PriceFormatType ||
                    this.PriceFormatType != null &&
                    this.PriceFormatType.Equals(other.PriceFormatType)
                ) && 
                (
                    this.PriceFormat == other.PriceFormat ||
                    this.PriceFormat != null &&
                    this.PriceFormat.Equals(other.PriceFormat)
                ) && 
                (
                    this.TickSize == other.TickSize ||
                    this.TickSize != null &&
                    this.TickSize.Equals(other.TickSize)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.CurrencyId != null)
                    hash = hash * 59 + this.CurrencyId.GetHashCode();
                if (this.ProductType != null)
                    hash = hash * 59 + this.ProductType.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.ExchangeId != null)
                    hash = hash * 59 + this.ExchangeId.GetHashCode();
                if (this.ContractGroupId != null)
                    hash = hash * 59 + this.ContractGroupId.GetHashCode();
                if (this.RiskDiscountContractGroupId != null)
                    hash = hash * 59 + this.RiskDiscountContractGroupId.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Months != null)
                    hash = hash * 59 + this.Months.GetHashCode();
                if (this.IsSecured != null)
                    hash = hash * 59 + this.IsSecured.GetHashCode();
                if (this.ValuePerPoint != null)
                    hash = hash * 59 + this.ValuePerPoint.GetHashCode();
                if (this.PriceFormatType != null)
                    hash = hash * 59 + this.PriceFormatType.GetHashCode();
                if (this.PriceFormat != null)
                    hash = hash * 59 + this.PriceFormat.GetHashCode();
                if (this.TickSize != null)
                    hash = hash * 59 + this.TickSize.GetHashCode();
                return hash;
            }
        }
    }

}
