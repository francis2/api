/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// OrderStrategy
    /// </summary>
    [DataContract]
    public partial class OrderStrategy :  IEquatable<OrderStrategy>
    {
        /// <summary>
        /// Buy, Sell
        /// </summary>
        /// <value>Buy, Sell</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum Buy for "Buy"
            /// </summary>
            [EnumMember(Value = "Buy")]
            Buy,
            
            /// <summary>
            /// Enum Sell for "Sell"
            /// </summary>
            [EnumMember(Value = "Sell")]
            Sell
        }

        /// <summary>
        /// ActiveStrategy, ExecutionFailed, ExecutionFinished, ExecutionInterrupted, InactiveStrategy, NotEnoughLiquidity, StoppedByUser
        /// </summary>
        /// <value>ActiveStrategy, ExecutionFailed, ExecutionFinished, ExecutionInterrupted, InactiveStrategy, NotEnoughLiquidity, StoppedByUser</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum ActiveStrategy for "ActiveStrategy"
            /// </summary>
            [EnumMember(Value = "ActiveStrategy")]
            ActiveStrategy,
            
            /// <summary>
            /// Enum ExecutionFailed for "ExecutionFailed"
            /// </summary>
            [EnumMember(Value = "ExecutionFailed")]
            ExecutionFailed,
            
            /// <summary>
            /// Enum ExecutionFinished for "ExecutionFinished"
            /// </summary>
            [EnumMember(Value = "ExecutionFinished")]
            ExecutionFinished,
            
            /// <summary>
            /// Enum ExecutionInterrupted for "ExecutionInterrupted"
            /// </summary>
            [EnumMember(Value = "ExecutionInterrupted")]
            ExecutionInterrupted,
            
            /// <summary>
            /// Enum InactiveStrategy for "InactiveStrategy"
            /// </summary>
            [EnumMember(Value = "InactiveStrategy")]
            InactiveStrategy,
            
            /// <summary>
            /// Enum NotEnoughLiquidity for "NotEnoughLiquidity"
            /// </summary>
            [EnumMember(Value = "NotEnoughLiquidity")]
            NotEnoughLiquidity,
            
            /// <summary>
            /// Enum StoppedByUser for "StoppedByUser"
            /// </summary>
            [EnumMember(Value = "StoppedByUser")]
            StoppedByUser
        }

        /// <summary>
        /// Buy, Sell
        /// </summary>
        /// <value>Buy, Sell</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// ActiveStrategy, ExecutionFailed, ExecutionFinished, ExecutionInterrupted, InactiveStrategy, NotEnoughLiquidity, StoppedByUser
        /// </summary>
        /// <value>ActiveStrategy, ExecutionFailed, ExecutionFinished, ExecutionInterrupted, InactiveStrategy, NotEnoughLiquidity, StoppedByUser</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderStrategy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderStrategy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderStrategy" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="AccountId">id of Account (required).</param>
        /// <param name="Timestamp">Timestamp (required).</param>
        /// <param name="ContractId">id of Contract (required).</param>
        /// <param name="OrderStrategyTypeId">id of OrderStrategyType (required).</param>
        /// <param name="InitiatorId">id of OrderStrategy.</param>
        /// <param name="Action">Buy, Sell (required).</param>
        /// <param name="_Params">_Params.</param>
        /// <param name="Uuid">Uuid.</param>
        /// <param name="Status">ActiveStrategy, ExecutionFailed, ExecutionFinished, ExecutionInterrupted, InactiveStrategy, NotEnoughLiquidity, StoppedByUser (required).</param>
        /// <param name="FailureMessage">FailureMessage.</param>
        /// <param name="SenderId">id of User.</param>
        /// <param name="CustomTag50">CustomTag50.</param>
        public OrderStrategy(int? Id = null, int? AccountId = null, DateTime? Timestamp = null, int? ContractId = null, int? OrderStrategyTypeId = null, int? InitiatorId = null, ActionEnum? Action = null, string _Params = null, string Uuid = null, StatusEnum? Status = null, string FailureMessage = null, int? SenderId = null, string CustomTag50 = null)
        {
            // to ensure "AccountId" is required (not null)
            if (AccountId == null)
            {
                throw new InvalidDataException("AccountId is a required property for OrderStrategy and cannot be null");
            }
            else
            {
                this.AccountId = AccountId;
            }
            // to ensure "Timestamp" is required (not null)
            if (Timestamp == null)
            {
                throw new InvalidDataException("Timestamp is a required property for OrderStrategy and cannot be null");
            }
            else
            {
                this.Timestamp = Timestamp;
            }
            // to ensure "ContractId" is required (not null)
            if (ContractId == null)
            {
                throw new InvalidDataException("ContractId is a required property for OrderStrategy and cannot be null");
            }
            else
            {
                this.ContractId = ContractId;
            }
            // to ensure "OrderStrategyTypeId" is required (not null)
            if (OrderStrategyTypeId == null)
            {
                throw new InvalidDataException("OrderStrategyTypeId is a required property for OrderStrategy and cannot be null");
            }
            else
            {
                this.OrderStrategyTypeId = OrderStrategyTypeId;
            }
            // to ensure "Action" is required (not null)
            if (Action == null)
            {
                throw new InvalidDataException("Action is a required property for OrderStrategy and cannot be null");
            }
            else
            {
                this.Action = Action;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for OrderStrategy and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            this.Id = Id;
            this.InitiatorId = InitiatorId;
            this._Params = _Params;
            this.Uuid = Uuid;
            this.FailureMessage = FailureMessage;
            this.SenderId = SenderId;
            this.CustomTag50 = CustomTag50;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// id of Account
        /// </summary>
        /// <value>id of Account</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public int? AccountId { get; set; }
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }
        /// <summary>
        /// id of Contract
        /// </summary>
        /// <value>id of Contract</value>
        [DataMember(Name="contractId", EmitDefaultValue=false)]
        public int? ContractId { get; set; }
        /// <summary>
        /// id of OrderStrategyType
        /// </summary>
        /// <value>id of OrderStrategyType</value>
        [DataMember(Name="orderStrategyTypeId", EmitDefaultValue=false)]
        public int? OrderStrategyTypeId { get; set; }
        /// <summary>
        /// id of OrderStrategy
        /// </summary>
        /// <value>id of OrderStrategy</value>
        [DataMember(Name="initiatorId", EmitDefaultValue=false)]
        public int? InitiatorId { get; set; }
        /// <summary>
        /// Gets or Sets _Params
        /// </summary>
        [DataMember(Name="params", EmitDefaultValue=false)]
        public string _Params { get; set; }
        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }
        /// <summary>
        /// Gets or Sets FailureMessage
        /// </summary>
        [DataMember(Name="failureMessage", EmitDefaultValue=false)]
        public string FailureMessage { get; set; }
        /// <summary>
        /// id of User
        /// </summary>
        /// <value>id of User</value>
        [DataMember(Name="senderId", EmitDefaultValue=false)]
        public int? SenderId { get; set; }
        /// <summary>
        /// Gets or Sets CustomTag50
        /// </summary>
        [DataMember(Name="customTag50", EmitDefaultValue=false)]
        public string CustomTag50 { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderStrategy {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  OrderStrategyTypeId: ").Append(OrderStrategyTypeId).Append("\n");
            sb.Append("  InitiatorId: ").Append(InitiatorId).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  _Params: ").Append(_Params).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  FailureMessage: ").Append(FailureMessage).Append("\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  CustomTag50: ").Append(CustomTag50).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderStrategy);
        }

        /// <summary>
        /// Returns true if OrderStrategy instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderStrategy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderStrategy other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.ContractId == other.ContractId ||
                    this.ContractId != null &&
                    this.ContractId.Equals(other.ContractId)
                ) && 
                (
                    this.OrderStrategyTypeId == other.OrderStrategyTypeId ||
                    this.OrderStrategyTypeId != null &&
                    this.OrderStrategyTypeId.Equals(other.OrderStrategyTypeId)
                ) && 
                (
                    this.InitiatorId == other.InitiatorId ||
                    this.InitiatorId != null &&
                    this.InitiatorId.Equals(other.InitiatorId)
                ) && 
                (
                    this.Action == other.Action ||
                    this.Action != null &&
                    this.Action.Equals(other.Action)
                ) && 
                (
                    this._Params == other._Params ||
                    this._Params != null &&
                    this._Params.Equals(other._Params)
                ) && 
                (
                    this.Uuid == other.Uuid ||
                    this.Uuid != null &&
                    this.Uuid.Equals(other.Uuid)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.FailureMessage == other.FailureMessage ||
                    this.FailureMessage != null &&
                    this.FailureMessage.Equals(other.FailureMessage)
                ) && 
                (
                    this.SenderId == other.SenderId ||
                    this.SenderId != null &&
                    this.SenderId.Equals(other.SenderId)
                ) && 
                (
                    this.CustomTag50 == other.CustomTag50 ||
                    this.CustomTag50 != null &&
                    this.CustomTag50.Equals(other.CustomTag50)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.ContractId != null)
                    hash = hash * 59 + this.ContractId.GetHashCode();
                if (this.OrderStrategyTypeId != null)
                    hash = hash * 59 + this.OrderStrategyTypeId.GetHashCode();
                if (this.InitiatorId != null)
                    hash = hash * 59 + this.InitiatorId.GetHashCode();
                if (this.Action != null)
                    hash = hash * 59 + this.Action.GetHashCode();
                if (this._Params != null)
                    hash = hash * 59 + this._Params.GetHashCode();
                if (this.Uuid != null)
                    hash = hash * 59 + this.Uuid.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.FailureMessage != null)
                    hash = hash * 59 + this.FailureMessage.GetHashCode();
                if (this.SenderId != null)
                    hash = hash * 59 + this.SenderId.GetHashCode();
                if (this.CustomTag50 != null)
                    hash = hash * 59 + this.CustomTag50.GetHashCode();
                return hash;
            }
        }
    }

}
