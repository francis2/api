/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// Account
    /// </summary>
    [DataContract]
    public partial class Account :  IEquatable<Account>
    {
        /// <summary>
        /// Customer, Giveup, House, Omnibus, Wash
        /// </summary>
        /// <value>Customer, Giveup, House, Omnibus, Wash</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccountTypeEnum
        {
            
            /// <summary>
            /// Enum Customer for "Customer"
            /// </summary>
            [EnumMember(Value = "Customer")]
            Customer,
            
            /// <summary>
            /// Enum Giveup for "Giveup"
            /// </summary>
            [EnumMember(Value = "Giveup")]
            Giveup,
            
            /// <summary>
            /// Enum House for "House"
            /// </summary>
            [EnumMember(Value = "House")]
            House,
            
            /// <summary>
            /// Enum Omnibus for "Omnibus"
            /// </summary>
            [EnumMember(Value = "Omnibus")]
            Omnibus,
            
            /// <summary>
            /// Enum Wash for "Wash"
            /// </summary>
            [EnumMember(Value = "Wash")]
            Wash
        }

        /// <summary>
        /// Hedger, Speculator
        /// </summary>
        /// <value>Hedger, Speculator</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MarginAccountTypeEnum
        {
            
            /// <summary>
            /// Enum Hedger for "Hedger"
            /// </summary>
            [EnumMember(Value = "Hedger")]
            Hedger,
            
            /// <summary>
            /// Enum Speculator for "Speculator"
            /// </summary>
            [EnumMember(Value = "Speculator")]
            Speculator
        }

        /// <summary>
        /// Corporation, GP, IRA, Individual, Joint, LLC, LLP, LP, Trust
        /// </summary>
        /// <value>Corporation, GP, IRA, Individual, Joint, LLC, LLP, LP, Trust</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LegalStatusEnum
        {
            
            /// <summary>
            /// Enum Corporation for "Corporation"
            /// </summary>
            [EnumMember(Value = "Corporation")]
            Corporation,
            
            /// <summary>
            /// Enum GP for "GP"
            /// </summary>
            [EnumMember(Value = "GP")]
            GP,
            
            /// <summary>
            /// Enum IRA for "IRA"
            /// </summary>
            [EnumMember(Value = "IRA")]
            IRA,
            
            /// <summary>
            /// Enum Individual for "Individual"
            /// </summary>
            [EnumMember(Value = "Individual")]
            Individual,
            
            /// <summary>
            /// Enum Joint for "Joint"
            /// </summary>
            [EnumMember(Value = "Joint")]
            Joint,
            
            /// <summary>
            /// Enum LLC for "LLC"
            /// </summary>
            [EnumMember(Value = "LLC")]
            LLC,
            
            /// <summary>
            /// Enum LLP for "LLP"
            /// </summary>
            [EnumMember(Value = "LLP")]
            LLP,
            
            /// <summary>
            /// Enum LP for "LP"
            /// </summary>
            [EnumMember(Value = "LP")]
            LP,
            
            /// <summary>
            /// Enum Trust for "Trust"
            /// </summary>
            [EnumMember(Value = "Trust")]
            Trust
        }

        /// <summary>
        /// Customer, Giveup, House, Omnibus, Wash
        /// </summary>
        /// <value>Customer, Giveup, House, Omnibus, Wash</value>
        [DataMember(Name="accountType", EmitDefaultValue=false)]
        public AccountTypeEnum? AccountType { get; set; }
        /// <summary>
        /// Hedger, Speculator
        /// </summary>
        /// <value>Hedger, Speculator</value>
        [DataMember(Name="marginAccountType", EmitDefaultValue=false)]
        public MarginAccountTypeEnum? MarginAccountType { get; set; }
        /// <summary>
        /// Corporation, GP, IRA, Individual, Joint, LLC, LLP, LP, Trust
        /// </summary>
        /// <value>Corporation, GP, IRA, Individual, Joint, LLC, LLP, LP, Trust</value>
        [DataMember(Name="legalStatus", EmitDefaultValue=false)]
        public LegalStatusEnum? LegalStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Account() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name (required).</param>
        /// <param name="UserId">id of User (required).</param>
        /// <param name="AccountType">Customer, Giveup, House, Omnibus, Wash (required).</param>
        /// <param name="Active">Active (required).</param>
        /// <param name="ClearingHouseId">id of ClearingHouse (required).</param>
        /// <param name="CftcNumber">CftcNumber.</param>
        /// <param name="MarginAccountType">Hedger, Speculator (required).</param>
        /// <param name="LegalStatus">Corporation, GP, IRA, Individual, Joint, LLC, LLP, LP, Trust (required).</param>
        /// <param name="_Readonly">_Readonly.</param>
        public Account(int? Id = null, string Name = null, int? UserId = null, AccountTypeEnum? AccountType = null, bool? Active = null, int? ClearingHouseId = null, string CftcNumber = null, MarginAccountTypeEnum? MarginAccountType = null, LegalStatusEnum? LegalStatus = null, bool? _Readonly = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for Account and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "UserId" is required (not null)
            if (UserId == null)
            {
                throw new InvalidDataException("UserId is a required property for Account and cannot be null");
            }
            else
            {
                this.UserId = UserId;
            }
            // to ensure "AccountType" is required (not null)
            if (AccountType == null)
            {
                throw new InvalidDataException("AccountType is a required property for Account and cannot be null");
            }
            else
            {
                this.AccountType = AccountType;
            }
            // to ensure "Active" is required (not null)
            if (Active == null)
            {
                throw new InvalidDataException("Active is a required property for Account and cannot be null");
            }
            else
            {
                this.Active = Active;
            }
            // to ensure "ClearingHouseId" is required (not null)
            if (ClearingHouseId == null)
            {
                throw new InvalidDataException("ClearingHouseId is a required property for Account and cannot be null");
            }
            else
            {
                this.ClearingHouseId = ClearingHouseId;
            }
            // to ensure "MarginAccountType" is required (not null)
            if (MarginAccountType == null)
            {
                throw new InvalidDataException("MarginAccountType is a required property for Account and cannot be null");
            }
            else
            {
                this.MarginAccountType = MarginAccountType;
            }
            // to ensure "LegalStatus" is required (not null)
            if (LegalStatus == null)
            {
                throw new InvalidDataException("LegalStatus is a required property for Account and cannot be null");
            }
            else
            {
                this.LegalStatus = LegalStatus;
            }
            this.Id = Id;
            this.CftcNumber = CftcNumber;
            this._Readonly = _Readonly;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// id of User
        /// </summary>
        /// <value>id of User</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }
        /// <summary>
        /// id of ClearingHouse
        /// </summary>
        /// <value>id of ClearingHouse</value>
        [DataMember(Name="clearingHouseId", EmitDefaultValue=false)]
        public int? ClearingHouseId { get; set; }
        /// <summary>
        /// Gets or Sets CftcNumber
        /// </summary>
        [DataMember(Name="cftcNumber", EmitDefaultValue=false)]
        public string CftcNumber { get; set; }
        /// <summary>
        /// Gets or Sets _Readonly
        /// </summary>
        [DataMember(Name="readonly", EmitDefaultValue=false)]
        public bool? _Readonly { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  ClearingHouseId: ").Append(ClearingHouseId).Append("\n");
            sb.Append("  CftcNumber: ").Append(CftcNumber).Append("\n");
            sb.Append("  MarginAccountType: ").Append(MarginAccountType).Append("\n");
            sb.Append("  LegalStatus: ").Append(LegalStatus).Append("\n");
            sb.Append("  _Readonly: ").Append(_Readonly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Account);
        }

        /// <summary>
        /// Returns true if Account instances are equal
        /// </summary>
        /// <param name="other">Instance of Account to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Account other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.AccountType == other.AccountType ||
                    this.AccountType != null &&
                    this.AccountType.Equals(other.AccountType)
                ) && 
                (
                    this.Active == other.Active ||
                    this.Active != null &&
                    this.Active.Equals(other.Active)
                ) && 
                (
                    this.ClearingHouseId == other.ClearingHouseId ||
                    this.ClearingHouseId != null &&
                    this.ClearingHouseId.Equals(other.ClearingHouseId)
                ) && 
                (
                    this.CftcNumber == other.CftcNumber ||
                    this.CftcNumber != null &&
                    this.CftcNumber.Equals(other.CftcNumber)
                ) && 
                (
                    this.MarginAccountType == other.MarginAccountType ||
                    this.MarginAccountType != null &&
                    this.MarginAccountType.Equals(other.MarginAccountType)
                ) && 
                (
                    this.LegalStatus == other.LegalStatus ||
                    this.LegalStatus != null &&
                    this.LegalStatus.Equals(other.LegalStatus)
                ) && 
                (
                    this._Readonly == other._Readonly ||
                    this._Readonly != null &&
                    this._Readonly.Equals(other._Readonly)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.AccountType != null)
                    hash = hash * 59 + this.AccountType.GetHashCode();
                if (this.Active != null)
                    hash = hash * 59 + this.Active.GetHashCode();
                if (this.ClearingHouseId != null)
                    hash = hash * 59 + this.ClearingHouseId.GetHashCode();
                if (this.CftcNumber != null)
                    hash = hash * 59 + this.CftcNumber.GetHashCode();
                if (this.MarginAccountType != null)
                    hash = hash * 59 + this.MarginAccountType.GetHashCode();
                if (this.LegalStatus != null)
                    hash = hash * 59 + this.LegalStatus.GetHashCode();
                if (this._Readonly != null)
                    hash = hash * 59 + this._Readonly.GetHashCode();
                return hash;
            }
        }
    }

}
