/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// UserAccountPositionLimit
    /// </summary>
    [DataContract]
    public partial class UserAccountPositionLimit :  IEquatable<UserAccountPositionLimit>
    {
        /// <summary>
        /// Cryptocurrency, Futures, MarketInternals, Options, Spread
        /// </summary>
        /// <value>Cryptocurrency, Futures, MarketInternals, Options, Spread</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProductTypeEnum
        {
            
            /// <summary>
            /// Enum Cryptocurrency for "Cryptocurrency"
            /// </summary>
            [EnumMember(Value = "Cryptocurrency")]
            Cryptocurrency,
            
            /// <summary>
            /// Enum Futures for "Futures"
            /// </summary>
            [EnumMember(Value = "Futures")]
            Futures,
            
            /// <summary>
            /// Enum MarketInternals for "MarketInternals"
            /// </summary>
            [EnumMember(Value = "MarketInternals")]
            MarketInternals,
            
            /// <summary>
            /// Enum Options for "Options"
            /// </summary>
            [EnumMember(Value = "Options")]
            Options,
            
            /// <summary>
            /// Enum Spread for "Spread"
            /// </summary>
            [EnumMember(Value = "Spread")]
            Spread
        }

        /// <summary>
        /// Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified
        /// </summary>
        /// <value>Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProductVerificationStatusEnum
        {
            
            /// <summary>
            /// Enum Inactive for "Inactive"
            /// </summary>
            [EnumMember(Value = "Inactive")]
            Inactive,
            
            /// <summary>
            /// Enum Locked for "Locked"
            /// </summary>
            [EnumMember(Value = "Locked")]
            Locked,
            
            /// <summary>
            /// Enum ReadyForContracts for "ReadyForContracts"
            /// </summary>
            [EnumMember(Value = "ReadyForContracts")]
            ReadyForContracts,
            
            /// <summary>
            /// Enum ReadyToTrade for "ReadyToTrade"
            /// </summary>
            [EnumMember(Value = "ReadyToTrade")]
            ReadyToTrade,
            
            /// <summary>
            /// Enum Verified for "Verified"
            /// </summary>
            [EnumMember(Value = "Verified")]
            Verified
        }

        /// <summary>
        /// Contract, ContractGroup, DiscountGroup, Exchange, Overall, Product, ProductType
        /// </summary>
        /// <value>Contract, ContractGroup, DiscountGroup, Exchange, Overall, Product, ProductType</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TotalByEnum
        {
            
            /// <summary>
            /// Enum Contract for "Contract"
            /// </summary>
            [EnumMember(Value = "Contract")]
            Contract,
            
            /// <summary>
            /// Enum ContractGroup for "ContractGroup"
            /// </summary>
            [EnumMember(Value = "ContractGroup")]
            ContractGroup,
            
            /// <summary>
            /// Enum DiscountGroup for "DiscountGroup"
            /// </summary>
            [EnumMember(Value = "DiscountGroup")]
            DiscountGroup,
            
            /// <summary>
            /// Enum Exchange for "Exchange"
            /// </summary>
            [EnumMember(Value = "Exchange")]
            Exchange,
            
            /// <summary>
            /// Enum Overall for "Overall"
            /// </summary>
            [EnumMember(Value = "Overall")]
            Overall,
            
            /// <summary>
            /// Enum Product for "Product"
            /// </summary>
            [EnumMember(Value = "Product")]
            Product,
            
            /// <summary>
            /// Enum ProductType for "ProductType"
            /// </summary>
            [EnumMember(Value = "ProductType")]
            ProductType
        }

        /// <summary>
        /// Cryptocurrency, Futures, MarketInternals, Options, Spread
        /// </summary>
        /// <value>Cryptocurrency, Futures, MarketInternals, Options, Spread</value>
        [DataMember(Name="productType", EmitDefaultValue=false)]
        public ProductTypeEnum? ProductType { get; set; }
        /// <summary>
        /// Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified
        /// </summary>
        /// <value>Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified</value>
        [DataMember(Name="productVerificationStatus", EmitDefaultValue=false)]
        public ProductVerificationStatusEnum? ProductVerificationStatus { get; set; }
        /// <summary>
        /// Contract, ContractGroup, DiscountGroup, Exchange, Overall, Product, ProductType
        /// </summary>
        /// <value>Contract, ContractGroup, DiscountGroup, Exchange, Overall, Product, ProductType</value>
        [DataMember(Name="totalBy", EmitDefaultValue=false)]
        public TotalByEnum? TotalBy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAccountPositionLimit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserAccountPositionLimit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAccountPositionLimit" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="ContractId">id of Contract.</param>
        /// <param name="ProductId">id of Product.</param>
        /// <param name="ExchangeId">id of Exchange.</param>
        /// <param name="ProductType">Cryptocurrency, Futures, MarketInternals, Options, Spread.</param>
        /// <param name="ProductVerificationStatus">Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified.</param>
        /// <param name="ContractGroupId">id of ContractGroup.</param>
        /// <param name="Active">Active (required).</param>
        /// <param name="TotalBy">Contract, ContractGroup, DiscountGroup, Exchange, Overall, Product, ProductType (required).</param>
        /// <param name="ShortLimit">ShortLimit.</param>
        /// <param name="LongLimit">LongLimit.</param>
        /// <param name="ExposedLimit">ExposedLimit.</param>
        /// <param name="Description">Description.</param>
        /// <param name="AccountId">id of Account (required).</param>
        public UserAccountPositionLimit(int? Id = null, int? ContractId = null, int? ProductId = null, int? ExchangeId = null, ProductTypeEnum? ProductType = null, ProductVerificationStatusEnum? ProductVerificationStatus = null, int? ContractGroupId = null, bool? Active = null, TotalByEnum? TotalBy = null, int? ShortLimit = null, int? LongLimit = null, int? ExposedLimit = null, string Description = null, int? AccountId = null)
        {
            // to ensure "Active" is required (not null)
            if (Active == null)
            {
                throw new InvalidDataException("Active is a required property for UserAccountPositionLimit and cannot be null");
            }
            else
            {
                this.Active = Active;
            }
            // to ensure "TotalBy" is required (not null)
            if (TotalBy == null)
            {
                throw new InvalidDataException("TotalBy is a required property for UserAccountPositionLimit and cannot be null");
            }
            else
            {
                this.TotalBy = TotalBy;
            }
            // to ensure "AccountId" is required (not null)
            if (AccountId == null)
            {
                throw new InvalidDataException("AccountId is a required property for UserAccountPositionLimit and cannot be null");
            }
            else
            {
                this.AccountId = AccountId;
            }
            this.Id = Id;
            this.ContractId = ContractId;
            this.ProductId = ProductId;
            this.ExchangeId = ExchangeId;
            this.ProductType = ProductType;
            this.ProductVerificationStatus = ProductVerificationStatus;
            this.ContractGroupId = ContractGroupId;
            this.ShortLimit = ShortLimit;
            this.LongLimit = LongLimit;
            this.ExposedLimit = ExposedLimit;
            this.Description = Description;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// id of Contract
        /// </summary>
        /// <value>id of Contract</value>
        [DataMember(Name="contractId", EmitDefaultValue=false)]
        public int? ContractId { get; set; }
        /// <summary>
        /// id of Product
        /// </summary>
        /// <value>id of Product</value>
        [DataMember(Name="productId", EmitDefaultValue=false)]
        public int? ProductId { get; set; }
        /// <summary>
        /// id of Exchange
        /// </summary>
        /// <value>id of Exchange</value>
        [DataMember(Name="exchangeId", EmitDefaultValue=false)]
        public int? ExchangeId { get; set; }
        /// <summary>
        /// id of ContractGroup
        /// </summary>
        /// <value>id of ContractGroup</value>
        [DataMember(Name="contractGroupId", EmitDefaultValue=false)]
        public int? ContractGroupId { get; set; }
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }
        /// <summary>
        /// Gets or Sets ShortLimit
        /// </summary>
        [DataMember(Name="shortLimit", EmitDefaultValue=false)]
        public int? ShortLimit { get; set; }
        /// <summary>
        /// Gets or Sets LongLimit
        /// </summary>
        [DataMember(Name="longLimit", EmitDefaultValue=false)]
        public int? LongLimit { get; set; }
        /// <summary>
        /// Gets or Sets ExposedLimit
        /// </summary>
        [DataMember(Name="exposedLimit", EmitDefaultValue=false)]
        public int? ExposedLimit { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// id of Account
        /// </summary>
        /// <value>id of Account</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public int? AccountId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserAccountPositionLimit {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ExchangeId: ").Append(ExchangeId).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  ProductVerificationStatus: ").Append(ProductVerificationStatus).Append("\n");
            sb.Append("  ContractGroupId: ").Append(ContractGroupId).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  TotalBy: ").Append(TotalBy).Append("\n");
            sb.Append("  ShortLimit: ").Append(ShortLimit).Append("\n");
            sb.Append("  LongLimit: ").Append(LongLimit).Append("\n");
            sb.Append("  ExposedLimit: ").Append(ExposedLimit).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserAccountPositionLimit);
        }

        /// <summary>
        /// Returns true if UserAccountPositionLimit instances are equal
        /// </summary>
        /// <param name="other">Instance of UserAccountPositionLimit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAccountPositionLimit other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.ContractId == other.ContractId ||
                    this.ContractId != null &&
                    this.ContractId.Equals(other.ContractId)
                ) && 
                (
                    this.ProductId == other.ProductId ||
                    this.ProductId != null &&
                    this.ProductId.Equals(other.ProductId)
                ) && 
                (
                    this.ExchangeId == other.ExchangeId ||
                    this.ExchangeId != null &&
                    this.ExchangeId.Equals(other.ExchangeId)
                ) && 
                (
                    this.ProductType == other.ProductType ||
                    this.ProductType != null &&
                    this.ProductType.Equals(other.ProductType)
                ) && 
                (
                    this.ProductVerificationStatus == other.ProductVerificationStatus ||
                    this.ProductVerificationStatus != null &&
                    this.ProductVerificationStatus.Equals(other.ProductVerificationStatus)
                ) && 
                (
                    this.ContractGroupId == other.ContractGroupId ||
                    this.ContractGroupId != null &&
                    this.ContractGroupId.Equals(other.ContractGroupId)
                ) && 
                (
                    this.Active == other.Active ||
                    this.Active != null &&
                    this.Active.Equals(other.Active)
                ) && 
                (
                    this.TotalBy == other.TotalBy ||
                    this.TotalBy != null &&
                    this.TotalBy.Equals(other.TotalBy)
                ) && 
                (
                    this.ShortLimit == other.ShortLimit ||
                    this.ShortLimit != null &&
                    this.ShortLimit.Equals(other.ShortLimit)
                ) && 
                (
                    this.LongLimit == other.LongLimit ||
                    this.LongLimit != null &&
                    this.LongLimit.Equals(other.LongLimit)
                ) && 
                (
                    this.ExposedLimit == other.ExposedLimit ||
                    this.ExposedLimit != null &&
                    this.ExposedLimit.Equals(other.ExposedLimit)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.ContractId != null)
                    hash = hash * 59 + this.ContractId.GetHashCode();
                if (this.ProductId != null)
                    hash = hash * 59 + this.ProductId.GetHashCode();
                if (this.ExchangeId != null)
                    hash = hash * 59 + this.ExchangeId.GetHashCode();
                if (this.ProductType != null)
                    hash = hash * 59 + this.ProductType.GetHashCode();
                if (this.ProductVerificationStatus != null)
                    hash = hash * 59 + this.ProductVerificationStatus.GetHashCode();
                if (this.ContractGroupId != null)
                    hash = hash * 59 + this.ContractGroupId.GetHashCode();
                if (this.Active != null)
                    hash = hash * 59 + this.Active.GetHashCode();
                if (this.TotalBy != null)
                    hash = hash * 59 + this.TotalBy.GetHashCode();
                if (this.ShortLimit != null)
                    hash = hash * 59 + this.ShortLimit.GetHashCode();
                if (this.LongLimit != null)
                    hash = hash * 59 + this.LongLimit.GetHashCode();
                if (this.ExposedLimit != null)
                    hash = hash * 59 + this.ExposedLimit.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                return hash;
            }
        }
    }

}
