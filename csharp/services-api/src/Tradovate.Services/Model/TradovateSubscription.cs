/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// TradovateSubscription
    /// </summary>
    [DataContract]
    public partial class TradovateSubscription :  IEquatable<TradovateSubscription>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TradovateSubscription" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TradovateSubscription() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TradovateSubscription" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="UserId">id of User (required).</param>
        /// <param name="Timestamp">Timestamp (required).</param>
        /// <param name="PlanPrice">PlanPrice (required).</param>
        /// <param name="CashBalanceLogId">id of CashBalanceLog.</param>
        /// <param name="AccountId">id of Account.</param>
        /// <param name="TradovateSubscriptionPlanId">id of TradovateSubscriptionPlan (required).</param>
        /// <param name="StartDate">StartDate (required).</param>
        /// <param name="ExpirationDate">ExpirationDate (required).</param>
        /// <param name="PaidAmount">PaidAmount (required).</param>
        /// <param name="CancelledRenewal">CancelledRenewal.</param>
        /// <param name="CancelReason">CancelReason.</param>
        public TradovateSubscription(int? Id = null, int? UserId = null, DateTime? Timestamp = null, double? PlanPrice = null, int? CashBalanceLogId = null, int? AccountId = null, int? TradovateSubscriptionPlanId = null, TradeDate StartDate = null, TradeDate ExpirationDate = null, double? PaidAmount = null, bool? CancelledRenewal = null, string CancelReason = null)
        {
            // to ensure "UserId" is required (not null)
            if (UserId == null)
            {
                throw new InvalidDataException("UserId is a required property for TradovateSubscription and cannot be null");
            }
            else
            {
                this.UserId = UserId;
            }
            // to ensure "Timestamp" is required (not null)
            if (Timestamp == null)
            {
                throw new InvalidDataException("Timestamp is a required property for TradovateSubscription and cannot be null");
            }
            else
            {
                this.Timestamp = Timestamp;
            }
            // to ensure "PlanPrice" is required (not null)
            if (PlanPrice == null)
            {
                throw new InvalidDataException("PlanPrice is a required property for TradovateSubscription and cannot be null");
            }
            else
            {
                this.PlanPrice = PlanPrice;
            }
            // to ensure "TradovateSubscriptionPlanId" is required (not null)
            if (TradovateSubscriptionPlanId == null)
            {
                throw new InvalidDataException("TradovateSubscriptionPlanId is a required property for TradovateSubscription and cannot be null");
            }
            else
            {
                this.TradovateSubscriptionPlanId = TradovateSubscriptionPlanId;
            }
            // to ensure "StartDate" is required (not null)
            if (StartDate == null)
            {
                throw new InvalidDataException("StartDate is a required property for TradovateSubscription and cannot be null");
            }
            else
            {
                this.StartDate = StartDate;
            }
            // to ensure "ExpirationDate" is required (not null)
            if (ExpirationDate == null)
            {
                throw new InvalidDataException("ExpirationDate is a required property for TradovateSubscription and cannot be null");
            }
            else
            {
                this.ExpirationDate = ExpirationDate;
            }
            // to ensure "PaidAmount" is required (not null)
            if (PaidAmount == null)
            {
                throw new InvalidDataException("PaidAmount is a required property for TradovateSubscription and cannot be null");
            }
            else
            {
                this.PaidAmount = PaidAmount;
            }
            this.Id = Id;
            this.CashBalanceLogId = CashBalanceLogId;
            this.AccountId = AccountId;
            this.CancelledRenewal = CancelledRenewal;
            this.CancelReason = CancelReason;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// id of User
        /// </summary>
        /// <value>id of User</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }
        /// <summary>
        /// Gets or Sets PlanPrice
        /// </summary>
        [DataMember(Name="planPrice", EmitDefaultValue=false)]
        public double? PlanPrice { get; set; }
        /// <summary>
        /// id of CashBalanceLog
        /// </summary>
        /// <value>id of CashBalanceLog</value>
        [DataMember(Name="cashBalanceLogId", EmitDefaultValue=false)]
        public int? CashBalanceLogId { get; set; }
        /// <summary>
        /// id of Account
        /// </summary>
        /// <value>id of Account</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public int? AccountId { get; set; }
        /// <summary>
        /// id of TradovateSubscriptionPlan
        /// </summary>
        /// <value>id of TradovateSubscriptionPlan</value>
        [DataMember(Name="tradovateSubscriptionPlanId", EmitDefaultValue=false)]
        public int? TradovateSubscriptionPlanId { get; set; }
        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public TradeDate StartDate { get; set; }
        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public TradeDate ExpirationDate { get; set; }
        /// <summary>
        /// Gets or Sets PaidAmount
        /// </summary>
        [DataMember(Name="paidAmount", EmitDefaultValue=false)]
        public double? PaidAmount { get; set; }
        /// <summary>
        /// Gets or Sets CancelledRenewal
        /// </summary>
        [DataMember(Name="cancelledRenewal", EmitDefaultValue=false)]
        public bool? CancelledRenewal { get; set; }
        /// <summary>
        /// Gets or Sets CancelReason
        /// </summary>
        [DataMember(Name="cancelReason", EmitDefaultValue=false)]
        public string CancelReason { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TradovateSubscription {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  PlanPrice: ").Append(PlanPrice).Append("\n");
            sb.Append("  CashBalanceLogId: ").Append(CashBalanceLogId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  TradovateSubscriptionPlanId: ").Append(TradovateSubscriptionPlanId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  PaidAmount: ").Append(PaidAmount).Append("\n");
            sb.Append("  CancelledRenewal: ").Append(CancelledRenewal).Append("\n");
            sb.Append("  CancelReason: ").Append(CancelReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TradovateSubscription);
        }

        /// <summary>
        /// Returns true if TradovateSubscription instances are equal
        /// </summary>
        /// <param name="other">Instance of TradovateSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradovateSubscription other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.PlanPrice == other.PlanPrice ||
                    this.PlanPrice != null &&
                    this.PlanPrice.Equals(other.PlanPrice)
                ) && 
                (
                    this.CashBalanceLogId == other.CashBalanceLogId ||
                    this.CashBalanceLogId != null &&
                    this.CashBalanceLogId.Equals(other.CashBalanceLogId)
                ) && 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.TradovateSubscriptionPlanId == other.TradovateSubscriptionPlanId ||
                    this.TradovateSubscriptionPlanId != null &&
                    this.TradovateSubscriptionPlanId.Equals(other.TradovateSubscriptionPlanId)
                ) && 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.ExpirationDate == other.ExpirationDate ||
                    this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    this.PaidAmount == other.PaidAmount ||
                    this.PaidAmount != null &&
                    this.PaidAmount.Equals(other.PaidAmount)
                ) && 
                (
                    this.CancelledRenewal == other.CancelledRenewal ||
                    this.CancelledRenewal != null &&
                    this.CancelledRenewal.Equals(other.CancelledRenewal)
                ) && 
                (
                    this.CancelReason == other.CancelReason ||
                    this.CancelReason != null &&
                    this.CancelReason.Equals(other.CancelReason)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.PlanPrice != null)
                    hash = hash * 59 + this.PlanPrice.GetHashCode();
                if (this.CashBalanceLogId != null)
                    hash = hash * 59 + this.CashBalanceLogId.GetHashCode();
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.TradovateSubscriptionPlanId != null)
                    hash = hash * 59 + this.TradovateSubscriptionPlanId.GetHashCode();
                if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                if (this.ExpirationDate != null)
                    hash = hash * 59 + this.ExpirationDate.GetHashCode();
                if (this.PaidAmount != null)
                    hash = hash * 59 + this.PaidAmount.GetHashCode();
                if (this.CancelledRenewal != null)
                    hash = hash * 59 + this.CancelledRenewal.GetHashCode();
                if (this.CancelReason != null)
                    hash = hash * 59 + this.CancelReason.GetHashCode();
                return hash;
            }
        }
    }

}
