/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// TradingPermission
    /// </summary>
    [DataContract]
    public partial class TradingPermission :  IEquatable<TradingPermission>
    {
        /// <summary>
        /// Accepted, Approved, Declined, Requested, Revoked
        /// </summary>
        /// <value>Accepted, Approved, Declined, Requested, Revoked</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Accepted for "Accepted"
            /// </summary>
            [EnumMember(Value = "Accepted")]
            Accepted,
            
            /// <summary>
            /// Enum Approved for "Approved"
            /// </summary>
            [EnumMember(Value = "Approved")]
            Approved,
            
            /// <summary>
            /// Enum Declined for "Declined"
            /// </summary>
            [EnumMember(Value = "Declined")]
            Declined,
            
            /// <summary>
            /// Enum Requested for "Requested"
            /// </summary>
            [EnumMember(Value = "Requested")]
            Requested,
            
            /// <summary>
            /// Enum Revoked for "Revoked"
            /// </summary>
            [EnumMember(Value = "Revoked")]
            Revoked
        }

        /// <summary>
        /// Accepted, Approved, Declined, Requested, Revoked
        /// </summary>
        /// <value>Accepted, Approved, Declined, Requested, Revoked</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TradingPermission" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TradingPermission() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TradingPermission" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="UserId">id of User (required).</param>
        /// <param name="AccountId">id of Account (required).</param>
        /// <param name="AccountHolderContact">AccountHolderContact (required).</param>
        /// <param name="AccountHolderEmail">AccountHolderEmail (required).</param>
        /// <param name="CtaContact">CtaContact (required).</param>
        /// <param name="CtaEmail">CtaEmail (required).</param>
        /// <param name="Status">Accepted, Approved, Declined, Requested, Revoked (required).</param>
        /// <param name="Updated">Updated.</param>
        /// <param name="ApprovedById">id of User.</param>
        public TradingPermission(int? Id = null, int? UserId = null, int? AccountId = null, string AccountHolderContact = null, string AccountHolderEmail = null, string CtaContact = null, string CtaEmail = null, StatusEnum? Status = null, DateTime? Updated = null, int? ApprovedById = null)
        {
            // to ensure "UserId" is required (not null)
            if (UserId == null)
            {
                throw new InvalidDataException("UserId is a required property for TradingPermission and cannot be null");
            }
            else
            {
                this.UserId = UserId;
            }
            // to ensure "AccountId" is required (not null)
            if (AccountId == null)
            {
                throw new InvalidDataException("AccountId is a required property for TradingPermission and cannot be null");
            }
            else
            {
                this.AccountId = AccountId;
            }
            // to ensure "AccountHolderContact" is required (not null)
            if (AccountHolderContact == null)
            {
                throw new InvalidDataException("AccountHolderContact is a required property for TradingPermission and cannot be null");
            }
            else
            {
                this.AccountHolderContact = AccountHolderContact;
            }
            // to ensure "AccountHolderEmail" is required (not null)
            if (AccountHolderEmail == null)
            {
                throw new InvalidDataException("AccountHolderEmail is a required property for TradingPermission and cannot be null");
            }
            else
            {
                this.AccountHolderEmail = AccountHolderEmail;
            }
            // to ensure "CtaContact" is required (not null)
            if (CtaContact == null)
            {
                throw new InvalidDataException("CtaContact is a required property for TradingPermission and cannot be null");
            }
            else
            {
                this.CtaContact = CtaContact;
            }
            // to ensure "CtaEmail" is required (not null)
            if (CtaEmail == null)
            {
                throw new InvalidDataException("CtaEmail is a required property for TradingPermission and cannot be null");
            }
            else
            {
                this.CtaEmail = CtaEmail;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for TradingPermission and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            this.Id = Id;
            this.Updated = Updated;
            this.ApprovedById = ApprovedById;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// id of User
        /// </summary>
        /// <value>id of User</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }
        /// <summary>
        /// id of Account
        /// </summary>
        /// <value>id of Account</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public int? AccountId { get; set; }
        /// <summary>
        /// Gets or Sets AccountHolderContact
        /// </summary>
        [DataMember(Name="accountHolderContact", EmitDefaultValue=false)]
        public string AccountHolderContact { get; set; }
        /// <summary>
        /// Gets or Sets AccountHolderEmail
        /// </summary>
        [DataMember(Name="accountHolderEmail", EmitDefaultValue=false)]
        public string AccountHolderEmail { get; set; }
        /// <summary>
        /// Gets or Sets CtaContact
        /// </summary>
        [DataMember(Name="ctaContact", EmitDefaultValue=false)]
        public string CtaContact { get; set; }
        /// <summary>
        /// Gets or Sets CtaEmail
        /// </summary>
        [DataMember(Name="ctaEmail", EmitDefaultValue=false)]
        public string CtaEmail { get; set; }
        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime? Updated { get; set; }
        /// <summary>
        /// id of User
        /// </summary>
        /// <value>id of User</value>
        [DataMember(Name="approvedById", EmitDefaultValue=false)]
        public int? ApprovedById { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TradingPermission {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountHolderContact: ").Append(AccountHolderContact).Append("\n");
            sb.Append("  AccountHolderEmail: ").Append(AccountHolderEmail).Append("\n");
            sb.Append("  CtaContact: ").Append(CtaContact).Append("\n");
            sb.Append("  CtaEmail: ").Append(CtaEmail).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  ApprovedById: ").Append(ApprovedById).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TradingPermission);
        }

        /// <summary>
        /// Returns true if TradingPermission instances are equal
        /// </summary>
        /// <param name="other">Instance of TradingPermission to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradingPermission other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.AccountHolderContact == other.AccountHolderContact ||
                    this.AccountHolderContact != null &&
                    this.AccountHolderContact.Equals(other.AccountHolderContact)
                ) && 
                (
                    this.AccountHolderEmail == other.AccountHolderEmail ||
                    this.AccountHolderEmail != null &&
                    this.AccountHolderEmail.Equals(other.AccountHolderEmail)
                ) && 
                (
                    this.CtaContact == other.CtaContact ||
                    this.CtaContact != null &&
                    this.CtaContact.Equals(other.CtaContact)
                ) && 
                (
                    this.CtaEmail == other.CtaEmail ||
                    this.CtaEmail != null &&
                    this.CtaEmail.Equals(other.CtaEmail)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Updated == other.Updated ||
                    this.Updated != null &&
                    this.Updated.Equals(other.Updated)
                ) && 
                (
                    this.ApprovedById == other.ApprovedById ||
                    this.ApprovedById != null &&
                    this.ApprovedById.Equals(other.ApprovedById)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.AccountHolderContact != null)
                    hash = hash * 59 + this.AccountHolderContact.GetHashCode();
                if (this.AccountHolderEmail != null)
                    hash = hash * 59 + this.AccountHolderEmail.GetHashCode();
                if (this.CtaContact != null)
                    hash = hash * 59 + this.CtaContact.GetHashCode();
                if (this.CtaEmail != null)
                    hash = hash * 59 + this.CtaEmail.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Updated != null)
                    hash = hash * 59 + this.Updated.GetHashCode();
                if (this.ApprovedById != null)
                    hash = hash * 59 + this.ApprovedById.GetHashCode();
                return hash;
            }
        }
    }

}
