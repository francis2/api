/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// CommandReport
    /// </summary>
    [DataContract]
    public partial class CommandReport :  IEquatable<CommandReport>
    {
        /// <summary>
        /// AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected
        /// </summary>
        /// <value>AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CommandStatusEnum
        {
            
            /// <summary>
            /// Enum AtExecution for "AtExecution"
            /// </summary>
            [EnumMember(Value = "AtExecution")]
            AtExecution,
            
            /// <summary>
            /// Enum ExecutionRejected for "ExecutionRejected"
            /// </summary>
            [EnumMember(Value = "ExecutionRejected")]
            ExecutionRejected,
            
            /// <summary>
            /// Enum ExecutionStopped for "ExecutionStopped"
            /// </summary>
            [EnumMember(Value = "ExecutionStopped")]
            ExecutionStopped,
            
            /// <summary>
            /// Enum ExecutionSuspended for "ExecutionSuspended"
            /// </summary>
            [EnumMember(Value = "ExecutionSuspended")]
            ExecutionSuspended,
            
            /// <summary>
            /// Enum OnHold for "OnHold"
            /// </summary>
            [EnumMember(Value = "OnHold")]
            OnHold,
            
            /// <summary>
            /// Enum Pending for "Pending"
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending,
            
            /// <summary>
            /// Enum PendingExecution for "PendingExecution"
            /// </summary>
            [EnumMember(Value = "PendingExecution")]
            PendingExecution,
            
            /// <summary>
            /// Enum Replaced for "Replaced"
            /// </summary>
            [EnumMember(Value = "Replaced")]
            Replaced,
            
            /// <summary>
            /// Enum RiskPassed for "RiskPassed"
            /// </summary>
            [EnumMember(Value = "RiskPassed")]
            RiskPassed,
            
            /// <summary>
            /// Enum RiskRejected for "RiskRejected"
            /// </summary>
            [EnumMember(Value = "RiskRejected")]
            RiskRejected
        }

        /// <summary>
        /// AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported
        /// </summary>
        /// <value>AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RejectReasonEnum
        {
            
            /// <summary>
            /// Enum AccountClosed for "AccountClosed"
            /// </summary>
            [EnumMember(Value = "AccountClosed")]
            AccountClosed,
            
            /// <summary>
            /// Enum AdvancedTrailingStopUnsupported for "AdvancedTrailingStopUnsupported"
            /// </summary>
            [EnumMember(Value = "AdvancedTrailingStopUnsupported")]
            AdvancedTrailingStopUnsupported,
            
            /// <summary>
            /// Enum AnotherCommandPending for "AnotherCommandPending"
            /// </summary>
            [EnumMember(Value = "AnotherCommandPending")]
            AnotherCommandPending,
            
            /// <summary>
            /// Enum BackMonthProhibited for "BackMonthProhibited"
            /// </summary>
            [EnumMember(Value = "BackMonthProhibited")]
            BackMonthProhibited,
            
            /// <summary>
            /// Enum ExecutionProviderNotConfigured for "ExecutionProviderNotConfigured"
            /// </summary>
            [EnumMember(Value = "ExecutionProviderNotConfigured")]
            ExecutionProviderNotConfigured,
            
            /// <summary>
            /// Enum ExecutionProviderUnavailable for "ExecutionProviderUnavailable"
            /// </summary>
            [EnumMember(Value = "ExecutionProviderUnavailable")]
            ExecutionProviderUnavailable,
            
            /// <summary>
            /// Enum InvalidContract for "InvalidContract"
            /// </summary>
            [EnumMember(Value = "InvalidContract")]
            InvalidContract,
            
            /// <summary>
            /// Enum InvalidPrice for "InvalidPrice"
            /// </summary>
            [EnumMember(Value = "InvalidPrice")]
            InvalidPrice,
            
            /// <summary>
            /// Enum LiquidationOnly for "LiquidationOnly"
            /// </summary>
            [EnumMember(Value = "LiquidationOnly")]
            LiquidationOnly,
            
            /// <summary>
            /// Enum LiquidationOnlyBeforeExpiration for "LiquidationOnlyBeforeExpiration"
            /// </summary>
            [EnumMember(Value = "LiquidationOnlyBeforeExpiration")]
            LiquidationOnlyBeforeExpiration,
            
            /// <summary>
            /// Enum MaxOrderQtyIsNotSpecified for "MaxOrderQtyIsNotSpecified"
            /// </summary>
            [EnumMember(Value = "MaxOrderQtyIsNotSpecified")]
            MaxOrderQtyIsNotSpecified,
            
            /// <summary>
            /// Enum MaxOrderQtyLimitReached for "MaxOrderQtyLimitReached"
            /// </summary>
            [EnumMember(Value = "MaxOrderQtyLimitReached")]
            MaxOrderQtyLimitReached,
            
            /// <summary>
            /// Enum MaxPosLimitMisconfigured for "MaxPosLimitMisconfigured"
            /// </summary>
            [EnumMember(Value = "MaxPosLimitMisconfigured")]
            MaxPosLimitMisconfigured,
            
            /// <summary>
            /// Enum MaxPosLimitReached for "MaxPosLimitReached"
            /// </summary>
            [EnumMember(Value = "MaxPosLimitReached")]
            MaxPosLimitReached,
            
            /// <summary>
            /// Enum MaxTotalPosLimitReached for "MaxTotalPosLimitReached"
            /// </summary>
            [EnumMember(Value = "MaxTotalPosLimitReached")]
            MaxTotalPosLimitReached,
            
            /// <summary>
            /// Enum MultipleAccountPlanRequired for "MultipleAccountPlanRequired"
            /// </summary>
            [EnumMember(Value = "MultipleAccountPlanRequired")]
            MultipleAccountPlanRequired,
            
            /// <summary>
            /// Enum NoQuote for "NoQuote"
            /// </summary>
            [EnumMember(Value = "NoQuote")]
            NoQuote,
            
            /// <summary>
            /// Enum NotEnoughLiquidity for "NotEnoughLiquidity"
            /// </summary>
            [EnumMember(Value = "NotEnoughLiquidity")]
            NotEnoughLiquidity,
            
            /// <summary>
            /// Enum OtherExecutionRelated for "OtherExecutionRelated"
            /// </summary>
            [EnumMember(Value = "OtherExecutionRelated")]
            OtherExecutionRelated,
            
            /// <summary>
            /// Enum ParentRejected for "ParentRejected"
            /// </summary>
            [EnumMember(Value = "ParentRejected")]
            ParentRejected,
            
            /// <summary>
            /// Enum RiskCheckTimeout for "RiskCheckTimeout"
            /// </summary>
            [EnumMember(Value = "RiskCheckTimeout")]
            RiskCheckTimeout,
            
            /// <summary>
            /// Enum SessionClosed for "SessionClosed"
            /// </summary>
            [EnumMember(Value = "SessionClosed")]
            SessionClosed,
            
            /// <summary>
            /// Enum Success for "Success"
            /// </summary>
            [EnumMember(Value = "Success")]
            Success,
            
            /// <summary>
            /// Enum TooLate for "TooLate"
            /// </summary>
            [EnumMember(Value = "TooLate")]
            TooLate,
            
            /// <summary>
            /// Enum TradingLocked for "TradingLocked"
            /// </summary>
            [EnumMember(Value = "TradingLocked")]
            TradingLocked,
            
            /// <summary>
            /// Enum TrailingStopNonOrderQtyModify for "TrailingStopNonOrderQtyModify"
            /// </summary>
            [EnumMember(Value = "TrailingStopNonOrderQtyModify")]
            TrailingStopNonOrderQtyModify,
            
            /// <summary>
            /// Enum Unauthorized for "Unauthorized"
            /// </summary>
            [EnumMember(Value = "Unauthorized")]
            Unauthorized,
            
            /// <summary>
            /// Enum UnknownReason for "UnknownReason"
            /// </summary>
            [EnumMember(Value = "UnknownReason")]
            UnknownReason,
            
            /// <summary>
            /// Enum Unsupported for "Unsupported"
            /// </summary>
            [EnumMember(Value = "Unsupported")]
            Unsupported
        }

        /// <summary>
        /// Canceled, Completed, Expired, Filled, PendingCancel, PendingNew, PendingReplace, Rejected, Suspended, Unknown, Working
        /// </summary>
        /// <value>Canceled, Completed, Expired, Filled, PendingCancel, PendingNew, PendingReplace, Rejected, Suspended, Unknown, Working</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrdStatusEnum
        {
            
            /// <summary>
            /// Enum Canceled for "Canceled"
            /// </summary>
            [EnumMember(Value = "Canceled")]
            Canceled,
            
            /// <summary>
            /// Enum Completed for "Completed"
            /// </summary>
            [EnumMember(Value = "Completed")]
            Completed,
            
            /// <summary>
            /// Enum Expired for "Expired"
            /// </summary>
            [EnumMember(Value = "Expired")]
            Expired,
            
            /// <summary>
            /// Enum Filled for "Filled"
            /// </summary>
            [EnumMember(Value = "Filled")]
            Filled,
            
            /// <summary>
            /// Enum PendingCancel for "PendingCancel"
            /// </summary>
            [EnumMember(Value = "PendingCancel")]
            PendingCancel,
            
            /// <summary>
            /// Enum PendingNew for "PendingNew"
            /// </summary>
            [EnumMember(Value = "PendingNew")]
            PendingNew,
            
            /// <summary>
            /// Enum PendingReplace for "PendingReplace"
            /// </summary>
            [EnumMember(Value = "PendingReplace")]
            PendingReplace,
            
            /// <summary>
            /// Enum Rejected for "Rejected"
            /// </summary>
            [EnumMember(Value = "Rejected")]
            Rejected,
            
            /// <summary>
            /// Enum Suspended for "Suspended"
            /// </summary>
            [EnumMember(Value = "Suspended")]
            Suspended,
            
            /// <summary>
            /// Enum Unknown for "Unknown"
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown,
            
            /// <summary>
            /// Enum Working for "Working"
            /// </summary>
            [EnumMember(Value = "Working")]
            Working
        }

        /// <summary>
        /// AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected
        /// </summary>
        /// <value>AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected</value>
        [DataMember(Name="commandStatus", EmitDefaultValue=false)]
        public CommandStatusEnum? CommandStatus { get; set; }
        /// <summary>
        /// AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported
        /// </summary>
        /// <value>AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported</value>
        [DataMember(Name="rejectReason", EmitDefaultValue=false)]
        public RejectReasonEnum? RejectReason { get; set; }
        /// <summary>
        /// Canceled, Completed, Expired, Filled, PendingCancel, PendingNew, PendingReplace, Rejected, Suspended, Unknown, Working
        /// </summary>
        /// <value>Canceled, Completed, Expired, Filled, PendingCancel, PendingNew, PendingReplace, Rejected, Suspended, Unknown, Working</value>
        [DataMember(Name="ordStatus", EmitDefaultValue=false)]
        public OrdStatusEnum? OrdStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommandReport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommandReport() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommandReport" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="CommandId">id of Command (required).</param>
        /// <param name="Timestamp">Timestamp (required).</param>
        /// <param name="CommandStatus">AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected (required).</param>
        /// <param name="RejectReason">AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported.</param>
        /// <param name="Text">Text.</param>
        /// <param name="OrdStatus">Canceled, Completed, Expired, Filled, PendingCancel, PendingNew, PendingReplace, Rejected, Suspended, Unknown, Working.</param>
        public CommandReport(int? Id = null, int? CommandId = null, DateTime? Timestamp = null, CommandStatusEnum? CommandStatus = null, RejectReasonEnum? RejectReason = null, string Text = null, OrdStatusEnum? OrdStatus = null)
        {
            // to ensure "CommandId" is required (not null)
            if (CommandId == null)
            {
                throw new InvalidDataException("CommandId is a required property for CommandReport and cannot be null");
            }
            else
            {
                this.CommandId = CommandId;
            }
            // to ensure "Timestamp" is required (not null)
            if (Timestamp == null)
            {
                throw new InvalidDataException("Timestamp is a required property for CommandReport and cannot be null");
            }
            else
            {
                this.Timestamp = Timestamp;
            }
            // to ensure "CommandStatus" is required (not null)
            if (CommandStatus == null)
            {
                throw new InvalidDataException("CommandStatus is a required property for CommandReport and cannot be null");
            }
            else
            {
                this.CommandStatus = CommandStatus;
            }
            this.Id = Id;
            this.RejectReason = RejectReason;
            this.Text = Text;
            this.OrdStatus = OrdStatus;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// id of Command
        /// </summary>
        /// <value>id of Command</value>
        [DataMember(Name="commandId", EmitDefaultValue=false)]
        public int? CommandId { get; set; }
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }
        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommandReport {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CommandId: ").Append(CommandId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  CommandStatus: ").Append(CommandStatus).Append("\n");
            sb.Append("  RejectReason: ").Append(RejectReason).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  OrdStatus: ").Append(OrdStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CommandReport);
        }

        /// <summary>
        /// Returns true if CommandReport instances are equal
        /// </summary>
        /// <param name="other">Instance of CommandReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommandReport other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.CommandId == other.CommandId ||
                    this.CommandId != null &&
                    this.CommandId.Equals(other.CommandId)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.CommandStatus == other.CommandStatus ||
                    this.CommandStatus != null &&
                    this.CommandStatus.Equals(other.CommandStatus)
                ) && 
                (
                    this.RejectReason == other.RejectReason ||
                    this.RejectReason != null &&
                    this.RejectReason.Equals(other.RejectReason)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.OrdStatus == other.OrdStatus ||
                    this.OrdStatus != null &&
                    this.OrdStatus.Equals(other.OrdStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.CommandId != null)
                    hash = hash * 59 + this.CommandId.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.CommandStatus != null)
                    hash = hash * 59 + this.CommandStatus.GetHashCode();
                if (this.RejectReason != null)
                    hash = hash * 59 + this.RejectReason.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.OrdStatus != null)
                    hash = hash * 59 + this.OrdStatus.GetHashCode();
                return hash;
            }
        }
    }

}
