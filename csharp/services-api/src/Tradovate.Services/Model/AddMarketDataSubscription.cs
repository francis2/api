/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// AddMarketDataSubscription
    /// </summary>
    [DataContract]
    public partial class AddMarketDataSubscription :  IEquatable<AddMarketDataSubscription>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddMarketDataSubscription" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddMarketDataSubscription() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddMarketDataSubscription" /> class.
        /// </summary>
        /// <param name="MarketDataSubscriptionPlanIds">MarketDataSubscriptionPlanIds (required).</param>
        /// <param name="Year">Year (required).</param>
        /// <param name="Month">Month (required).</param>
        /// <param name="AccountId">id of Account.</param>
        /// <param name="UserId">id of User.</param>
        public AddMarketDataSubscription(List<int?> MarketDataSubscriptionPlanIds = null, int? Year = null, int? Month = null, int? AccountId = null, int? UserId = null)
        {
            // to ensure "MarketDataSubscriptionPlanIds" is required (not null)
            if (MarketDataSubscriptionPlanIds == null)
            {
                throw new InvalidDataException("MarketDataSubscriptionPlanIds is a required property for AddMarketDataSubscription and cannot be null");
            }
            else
            {
                this.MarketDataSubscriptionPlanIds = MarketDataSubscriptionPlanIds;
            }
            // to ensure "Year" is required (not null)
            if (Year == null)
            {
                throw new InvalidDataException("Year is a required property for AddMarketDataSubscription and cannot be null");
            }
            else
            {
                this.Year = Year;
            }
            // to ensure "Month" is required (not null)
            if (Month == null)
            {
                throw new InvalidDataException("Month is a required property for AddMarketDataSubscription and cannot be null");
            }
            else
            {
                this.Month = Month;
            }
            this.AccountId = AccountId;
            this.UserId = UserId;
        }
        
        /// <summary>
        /// Gets or Sets MarketDataSubscriptionPlanIds
        /// </summary>
        [DataMember(Name="marketDataSubscriptionPlanIds", EmitDefaultValue=false)]
        public List<int?> MarketDataSubscriptionPlanIds { get; set; }
        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name="year", EmitDefaultValue=false)]
        public int? Year { get; set; }
        /// <summary>
        /// Gets or Sets Month
        /// </summary>
        [DataMember(Name="month", EmitDefaultValue=false)]
        public int? Month { get; set; }
        /// <summary>
        /// id of Account
        /// </summary>
        /// <value>id of Account</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public int? AccountId { get; set; }
        /// <summary>
        /// id of User
        /// </summary>
        /// <value>id of User</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddMarketDataSubscription {\n");
            sb.Append("  MarketDataSubscriptionPlanIds: ").Append(MarketDataSubscriptionPlanIds).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AddMarketDataSubscription);
        }

        /// <summary>
        /// Returns true if AddMarketDataSubscription instances are equal
        /// </summary>
        /// <param name="other">Instance of AddMarketDataSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddMarketDataSubscription other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MarketDataSubscriptionPlanIds == other.MarketDataSubscriptionPlanIds ||
                    this.MarketDataSubscriptionPlanIds != null &&
                    this.MarketDataSubscriptionPlanIds.SequenceEqual(other.MarketDataSubscriptionPlanIds)
                ) && 
                (
                    this.Year == other.Year ||
                    this.Year != null &&
                    this.Year.Equals(other.Year)
                ) && 
                (
                    this.Month == other.Month ||
                    this.Month != null &&
                    this.Month.Equals(other.Month)
                ) && 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MarketDataSubscriptionPlanIds != null)
                    hash = hash * 59 + this.MarketDataSubscriptionPlanIds.GetHashCode();
                if (this.Year != null)
                    hash = hash * 59 + this.Year.GetHashCode();
                if (this.Month != null)
                    hash = hash * 59 + this.Month.GetHashCode();
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                return hash;
            }
        }
    }

}
